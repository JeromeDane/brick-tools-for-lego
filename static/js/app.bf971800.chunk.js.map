{"version":3,"sources":["src/data/colors.ts","src/components/Paginator.tsx","src/components/Select.tsx","src/components/LoadingWrapper.tsx","src/components/TextInput.tsx","src/components/Themed.tsx","src/data/part-categories.ts","src/data/themes.ts","src/screens/sets/SetPreview.tsx","src/components/ScaledImage.tsx","src/components/Switch.tsx","src/components/Spinner.tsx","src/components/APISupport.tsx","webpack:///./index.js?41f5","src/data/elements.ts","src/components/TextLink.tsx","src/hooks/useColorScheme.ts","src/App.tsx","src/data/parts.ts","src/data/sets.ts","src/hooks/useCachedResources.ts","src/assets/fonts/SpaceMono-Regular.ttf","src/navigation/Navigation.tsx","src/data/DataProvider.tsx","src/constants/Colors.ts","src/screens/AboutScreen.tsx","src/api/brickset.ts","src/screens/NotFoundScreen.tsx","src/screens/element/ElementScreen.tsx","src/screens/element/ElementDetails.tsx","src/data/part-subcategories.ts","src/data/color-order.ts","src/screens/element/ElementSets.tsx","src/screens/ThemesScreen.tsx","src/screens/part/PartScreen.tsx","src/screens/part/ElementPreview.tsx","src/screens/parts/PartsScreen.tsx","src/screens/parts/PartPreview.tsx","src/screens/sets/SetsScreen.tsx","src/screens/SettingsScreen.tsx","src/navigation/linking.ts","src/screens/set/SetScreen.tsx","src/screens/set/SetDetails.tsx","src/components/Checkbox.tsx","src/screens/set/parts/SetParts.tsx","src/screens/set/parts/SetPartsList.tsx","src/data/inventory-parts.ts","src/screens/set/parts/SetPartPreview.tsx","src/screens/set/SetInstructions.tsx"],"names":["colors","colorsData","reduce","acc","colorData","colorIndex","colorOrder","indexOf","name","id","isTrans","sortOrder","Number","POSITIVE_INFINITY","colorsList","Object","keys","map","sort","sortBy","props","numPages","Math","ceil","numItems","pageSize","pickerItems","i","push","label","toString","value","View","style","flex","flexDirection","justifyContent","alignItems","flexGrow","onValueChange","onPageSizeChange","parseInt","items","TouchableOpacity","height","selectedValue","onPress","onPageChange","Icon","marginRight","marginLeft","colorName","theme","colorFromProps","Colors","useTheme","autoComplete","mode","position","top","Platform","OS","left","width","zIndex","borderWidth","Picker","color","text","backgroundColor","background","undefined","marginHorizontal","prompt","dropdownIconColor","Item","key","children","loading","useState","isLoading","setIsLoading","useEffect","ActivityIndicator","TextInput","ref","createRef","isFocuses","setIsFocused","onFocus","onBlur","right","clearable","onChangeText","current","blur","DefaultTextInput","useThemeColor","FontAwesome","size","otherProps","paddingTop","Text","paddingHorizontal","fontSize","borderColor","borderRadius","padding","lightColor","darkColor","light","dark","partCategoriesListUnsorted","partCategories","categoriesData","categoryData","partCategoriesList","themesList","themesData","navigation","set","sortField","setNum","styles","navigate","Title","title","Content","image","source","uri","imageURL","numParts","toLocaleString","year","LEGOCom","US","retailPrice","ownedBy","wantedBy","StyleSheet","create","marginBottom","setImageSize","DefaultImage","getSize","w","h","newWidth","min","maxWidth","newHeight","maxHeight","marginTop","textAlign","trackColor","false","true","thumbColor","ios_backgroundColor","visible","textContent","overlayColor","textStyle","url","registerRootComponent","App","previousElements","elementsByPartColor","useElements","context","useContext","DataContext","parts","useParts","elements","elementsData","element","partNum","colorId","setElements","useMemo","Linking","openURL","primary","isLoadingComplete","colorScheme","BaseTheme","Appearance","getColorScheme","DarkTheme","DefaultTheme","SafeAreaProvider","StatusBar","require","sizeRegex","processedParts","partsData","partData","match","padStart","length","heightParsed","isNaN","nameSort","replace","category","getPartCategory","partCatId","subCategory","getSubCategory","colorIds","UNKNOWN_PART","partMaterial","dataContext","setParts","previousBricksetCollection","emptyLEGOCom","dateFirstAvailable","dateLastAvailable","useSets","sets","setSets","bricksetCollection","useBricksetCollection","console","log","setsData","setData","bricksetSet","bricksetSets","myCollection","themes","themeId","setNumSort","inventories","UK","CA","DE","collections","thumbnailURL","collection","owned","wanted","qtyOwned","rating","notes","bricksetID","setID","processSets","useSet","setNumber","find","React","setLoadingComplete","async","SplashScreen","preventAutoHideAsync","Font","loadAsync","font","warn","hideAsync","module","exports","NavigationContainer","linking","documentTitle","formatter","options","route","Stack","Navigator","Screen","component","DrawerNav","headerShown","ElementScreen","PartScreen","SetTabs","NotFoundScreen","createNativeStackNavigator","Drawer","createDrawerNavigator","MenuButton","Pressable","toggleDrawer","opacity","pressed","MaterialIcons","DrawerContent","DrawerContentScrollView","fontWeight","DrawerItemList","initialRouteName","drawerContent","SetsScreen","drawerIcon","headerLeft","ThemesScreen","AntDesign","PartsScreen","MaterialCommunityIcons","SettingsScreen","AboutScreen","errorIfSetterNotReady","error","createContext","setBricksetCollection","isLoggedInToBrickset","setIsLoggedInToBrickset","Provider","tint","tabIconDefault","tabIconSelected","ScrollView","container","icon","version","fontStyle","linkText","paragraph","apiKey","Constants","manifest","extra","BRICKSET_API_KEY","userHash","api","method","data","Promise","resolve","reject","fetch","headers","body","then","response","JSON","parse","e","catch","BRICKSET_KEYS","useSaveCollection","updatedCollection","AsyncStorage","setItem","stringify","isLoggedInReadFromStorage","getItem","hash","Boolean","collectionRead","saveCollection","result","username","password","status","all","parseCollection","number","numberVariant","params","ownedResult","wantedResult","SetID","want","link","paddingVertical","Tab","createMaterialTopTabNavigator","setOptions","part","usePart","useGetElementByPartAndColor","getElementByPartAndColor","isFocused","useIsFocused","initialParams","ElementDetails","setNumbers","ElementSets","getState","routes","index","Image","brickLink","getSet","useGetSet","setPageSize","currentPage","setCurrentPage","scrollRef","useRef","slice","val","scrollTo","y","animated","filter","parentId","yearFrom","yearTo","numSets","defaultColor","default","setSortOrder","partCategory","setPartCategory","colorFilter","setColorFilter","showPrints","setShowPrints","isSorting","setIsSorting","filterBy","setFilterBy","partsList","usePartsAsLists","sortedParts","apply","split","filteredParts","toLowerCase","paddingBottom","concat","defaultColorId","setSortField","setTheme","collectionFilter","setCollectionFilter","useIsLoggedInToBrickset","sortedSets","filteredSets","marginVertical","field","setUsername","setPassword","loadingMessage","setLoadingMessage","login","useLogin","logOut","useLogOut","isLoggedIn","fetchBricksetCollection","useFetchBricksetCollection","secureTextEntry","prefixes","makeUrl","config","screens","Root","path","Parts","Themes","Sets","About","Settings","Element","Set","SetDetails","SetInstructions","SetParts","Part","Modal","NotFound","SetDetailsScreen","SetPartsScreen","SetInstructionsScreen","quantityOwned","setQuantityOwned","setWanted","useSetWanted","setOwned","useSetOwned","toFixed","newValue","keyboardType","int","tintColors","lineWidth","hasFocused","setHasFocused","useFocusEffect","useCallback","inventoryId","inventoryParts","useInventoryParts","defaultSortOrder","showSpareParts","setShowSpareParts","sortedInventortParts","partsToShow","isSpare","inventoryPart","inventortPart","inventoryPartsData","inventoryPartData","p","c","quantity","q","s","instructions","setInstructions","downloadUrl","setDownloadUrl","setError","useApi","instruction","disabled","URL","setTimeout","description","display"],"mappings":"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A,aACA,aACA,OACA,SACA,OACA,YACA,SACA,eACA,cACA,sBACA,cACA,YACA,oBACA,oBACA,eACA,mBACA,qBACA,cACA,qBACA,mBACA,kBACA,kBACA,eAEA,sBACA,mBACA,UACA,cACA,kBACA,WACA,uBACA,cACA,eACA,cACA,oBACA,eACA,cACA,eACA,uBACA,wBACA,aACA,cACA,cACA,kBACA,iBACA,gBACA,cACA,aACA,aACA,QACA,eACA,SACA,cACA,0BACA,cACA,sBACA,OACA,aACA,eACA,uBACA,qBACA,SACA,mBACA,aACA,mBACA,oBACA,kBACA,wBACA,yBACA,kBACA,iBACA,cACA,eACA,cACA,sBACA,oBACA,OACA,sBACA,aACA,WACA,qBACA,YACA,aACA,qBACA,cACA,WACA,eACA,aACA,cACA,cACA,WACA,mBACA,eACA,cACA,YACA,gBACA,iBACA,gBACA,cACA,kBACA,qBACA,gBACA,2BACA,2BACA,+BACA,oBACA,yBACA,gBACA,eACA,gBACA,cACA,iBACA,kBACA,gBACA,4BACA,qBACA,wBACA,oBACA,gBACA,qBACA,qBACA,gBACA,eACA,cACA,mBACA,iBACA,uBACA,uBACA,uBACA,gBACA,uBACA,sBACA,qBACA,oBACA,oBACA,sBACA,sBACA,iBACA,eACA,gBACA,yBACA,0BACA,0BACA,2BACA,yBACA,0BACA,sBACA,mBACA,sBACA,sBACA,QACA,cACA,uBACA,kBACA,mCACA,mBACA,mBACA,2BACA,oBACA,oBACA,mBACA,uBACA,QACA,yB,0FCxLa,YAAqE,IAA/ChF,EAA8C,EAA9CA,WACnC,EAAwBA,EAAWwQ,WAA5BC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,MAEThN,GAD2B,IAAAsM,8BACjBC,CAAyBQ,EAAOC,GAAOtB,OAAOzL,QAAS8M,EAAOC,GAAOtB,OAAOxL,SACtFiN,GAAS,IAAAC,aAHf,GAIgC,IAAAtT,UAAS,IAJzC,qBAIOtD,EAJP,KAIiB6W,EAJjB,QAKsC,IAAAvT,UAAS,GAL/C,qBAKOwT,EALP,KAKoBC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","file":"static/js/app.bf971800.chunk.js","sourcesContent":["import {sortBy} from 'sort-by-typescript'\nimport colorsData from './raw/colors.json'\nimport colorOrder from './color-order'\n\ntype ThirdPartyColor = {\n  id: string,\n  name: string\n}\n\ntype ColorData = {\n  id: string;\n  name: string;\n  rgb: string;\n  isTrans: string;\n  firstYear: number;\n  lastYear: number;\n  lego: ThirdPartyColor;\n  lDraw: ThirdPartyColor;\n  brickLink: ThirdPartyColor;\n  brickOwl: ThirdPartyColor;\n}\n\nexport type Color = {\n  id: string;\n  name: string;\n  rgb: string;\n  isTrans: boolean;\n  sortOrder: number;\n  firstYear: number;\n  lastYear: number;\n  lego: ThirdPartyColor;\n  lDraw: ThirdPartyColor;\n  brickLink: ThirdPartyColor;\n  brickOwl: ThirdPartyColor;\n}\n\nconst colors = (colorsData as ColorData[])\n  .reduce((acc: {[key: string]: Color}, colorData) => {\n    const colorIndex = colorOrder.indexOf(colorData.name)\n    return Object.assign(acc, {[colorData.id]:\n      {\n        ...colorData,\n        isTrans: colorData.isTrans == 't',\n        sortOrder: colorIndex > -1 ? colorIndex : Number.POSITIVE_INFINITY\n      } as Color\n    })\n  },\n  {}\n  )\n\nexport default colors\n\nexport const colorsList = Object.keys(colors)\n  .map(id => colors[id])\n  .sort(sortBy('name'))\n","/**\n * Learn more about Light and Dark modes:\n * https://docs.expo.io/guides/color-schemes/\n */\n\nimport React from 'react'\nimport {TouchableOpacity, View} from 'react-native'\nimport {Icon} from './Themed'\nimport Colors from '../constants/Colors'\nimport useColorScheme from '../hooks/useColorScheme'\nimport Select from './Select'\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme()\n  const colorFromProps = props[theme]\n\n  if(colorFromProps) {\n    return colorFromProps\n  } else {\n    return Colors[theme][colorName]\n  }\n}\n\ntype PaginatorProps = {\n  selectedValue: number;\n  onPageChange: (itemValue: number) => void | undefined;\n  onPageSizeChange: (itemValue: number) => void | undefined;\n  numItems: number;\n  pageSize: number;\n}\n\nexport default function Paginator(props: PaginatorProps) {\n  const numPages = Math.ceil(props.numItems/props.pageSize),\n        pickerItems = []\n  if(numPages < 2) return null\n  for (let i = 0; i < numPages; i++)\n    pickerItems.push(\n      {label: (i + 1).toString(), value: i}\n    )\n  return <View style={{\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexGrow: 1\n  }}>\n    <Select\n      label=\"Show\"\n      value={props.pageSize}\n      onValueChange={value => props.onPageSizeChange(parseInt(value.toString()))}\n      items={[\n        {label: '10', value: 10},\n        {label: '25', value: 25},\n        {label: '50', value: 50},\n        {label: '100', value: 100}\n      ]} />\n    {numPages > 1\n      ? <>\n        <TouchableOpacity\n          style={{height: props.selectedValue == 0 ? 0 : 'auto'}}\n          onPress={() =>\n            props.onPageChange(props.selectedValue == 0 ? 0 : props.selectedValue - 1)\n          }>\n          <Icon name=\"chevron-left\" style={{marginRight: 20}} />\n        </TouchableOpacity>\n        <Select\n          label=\"Current Page\"\n          onValueChange={value => props.onPageChange(parseInt(value.toString()))}\n          value={props.selectedValue}\n          items={pickerItems} />\n        <TouchableOpacity\n          style={{height: props.selectedValue == numPages - 1 ? 0 : 'auto'}}\n          onPress={() =>\n            props.onPageChange(props.selectedValue + 1)\n          }>\n          <Icon name=\"chevron-right\" style={{marginLeft: 20}} />\n        </TouchableOpacity>\n      </>\n      : null\n    }\n  </View>\n}\n","import React, {ReactNode} from 'react'\nimport {Platform, View} from 'react-native'\nimport {Picker} from '@react-native-picker/picker'\nimport {TextInput, useTheme} from 'react-native-paper'\n\ntype SelectProps = {\n  items: {label: string; value: string | number; custom?: ReactNode; }[]\n  label: string;\n  value: string|number;\n  onValueChange: (value: string|number) => void;\n}\n\nexport default function Select({items, label, value, onValueChange}: SelectProps) {\n  const theme = useTheme()\n  return <View style={{\n    flexGrow: 1\n  }}>\n    {/* right={<TextInput.Icon name=\"eye\" />} */}\n    <TextInput\n      autoComplete={false}\n      label={label}\n      value={' '}\n      mode='outlined' />\n    <View style={{\n      position: 'absolute',\n      top: Platform.OS == 'web' ? 12 : 10,\n      left: 0,\n      width: '100%',\n      zIndex: 100,\n      borderWidth: 0,\n      marginRight: 20\n    }}>\n      <Picker\n        style={{\n          color: theme.colors.text,\n          backgroundColor: Platform.OS == 'web' ? theme.colors.background : undefined,\n          borderWidth: 0,\n          marginHorizontal: Platform.OS == 'web' ? 10 : 0,\n          height: Platform.OS == 'web' ? 50 : undefined\n        }}\n        prompt={label}\n        dropdownIconColor={theme.colors.text}\n        selectedValue={value}\n        onValueChange={onValueChange}>\n        {items.map(({label, value}, i) =>\n          <Picker.Item key={i} value={value} label={label} />\n        )}\n      </Picker>\n    </View>\n  </View>\n}\n","import React, {useEffect, useState} from 'react'\nimport {ActivityIndicator, StyleProp, View, ViewStyle} from 'react-native'\n\ntype LoadingWrapperProps = {\n  children: JSX.Element[] | JSX.Element,\n  loading?: boolean,\n  style?: StyleProp<ViewStyle>\n}\n\nconst LoadingWrapper = ({children, loading, style = {}}: LoadingWrapperProps) => {\n  const [isLoading, setIsLoading] = useState(true)\n  useEffect(() => {\n    if(isLoading) setIsLoading(false)\n  }, [isLoading])\n  return <View>\n    {(isLoading || loading)\n      ? <ActivityIndicator style={style} color=\"#aaa\" />\n      : children\n    }\n  </View>\n}\n\nexport default LoadingWrapper\n","import React, {createRef, useState} from 'react'\nimport {TextInput as DefaultTextInput} from 'react-native-paper'\n\ntype TextInputProps = React.ComponentProps<typeof DefaultTextInput> & {\n  autoComplete?: boolean;\n  clearable?: boolean;\n  value?: string;\n  onFocus?: () => void;\n  onBlur?: () => void;\n  onChangeText?: (text: string) => void;\n}\n\nexport default function TextInput(props: TextInputProps) {\n  const ref = createRef(),\n        [isFocuses, setIsFocused] = useState(false)\n  return <DefaultTextInput\n    {...props}\n    ref={ref}\n    onFocus={() => {\n      setIsFocused(true)\n      if(props.onFocus) props.onFocus()\n    }}\n    onBlur={() => {\n      setIsFocused(false)\n      if(props.onBlur) props.onBlur()\n    }}\n    right={(props.clearable && props.value && !isFocuses)\n      ? <TextInput.Icon name=\"close\" onPress={() => {\n        props.onChangeText('')\n        ref.current.blur()\n      }} />\n      : null\n    }\n    autoComplete={false}\n    mode={'outlined'} />\n}\n\nTextInput.Icon = DefaultTextInput.Icon\n","/**\n * Learn more about Light and Dark modes:\n * https://docs.expo.io/guides/color-schemes/\n */\n\nimport React from 'react'\nimport {FontAwesome} from '@expo/vector-icons'\nimport {Text as DefaultText, View as DefaultView, TextInput as DefaultTextInput} from 'react-native'\nimport Colors from '../constants/Colors'\nimport useColorScheme from '../hooks/useColorScheme'\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme()\n  const colorFromProps = props[theme]\n\n  if(colorFromProps) {\n    return colorFromProps\n  } else {\n    return Colors[theme][colorName]\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const {style, lightColor, darkColor, ...otherProps} = props\n  const color = useThemeColor({light: lightColor, dark: darkColor}, 'text')\n\n  return <DefaultText style={[{color}, style]} {...otherProps} />\n}\n\ntype DefaultTextInputProps = React.ComponentProps<typeof DefaultTextInput>\ninterface TextInputProps extends DefaultTextInputProps {\n  label?: string;\n  style: any // TODO: type this properly\n}\n\nexport function TextInput(props: TextInputProps) {\n  const {style, ...otherProps} = props\n  const backgroundColor = useThemeColor({}, 'background')\n  const color = useThemeColor({}, 'text')\n\n  return <View style={[{\n    flex: 1,\n    flexDirection: 'row',\n    flexGrow: 1,\n    position: 'relative',\n    paddingTop: 8\n  },\n  props.style]}>\n    {props.label && <Text style={{\n      position: 'absolute',\n      top: 0,\n      left: 6,\n      zIndex: 100,\n      paddingHorizontal: 4,\n      backgroundColor,\n      fontSize: 12\n    }}>\n      {props.label}\n    </Text>\n    }\n    <DefaultTextInput style={[{\n      backgroundColor,\n      borderWidth: 1,\n      borderColor: color,\n      borderRadius: 4,\n      color,\n      padding: 10,\n      flexGrow: 1\n    },\n    style]} {...otherProps} />\n  </View>\n}\n\nexport function View(props: ViewProps) {\n  const {style, lightColor, darkColor, ...otherProps} = props,\n        backgroundColor = useThemeColor({light: lightColor, dark: darkColor}, 'background')\n  return <DefaultView style={[{backgroundColor}, style]} {...otherProps} />\n}\n\n/**\n * You can explore the built-in icon families and icons on the web at https://icons.expo.fyi/\n */\nexport function Icon(props: any) {\n  const color = useThemeColor({}, 'text')\n  return <FontAwesome size={30}  {...props} style={{color, ...props.style}}/>\n}\n","import {sortBy} from 'sort-by-typescript'\nimport categoriesData from './raw/part_categories.json'\n\ntype PartCategoryData = {\n  id: string,\n  name: string\n}\n\nexport type PartCategory = {\n  id: string,\n  name: string\n}\n\nconst partCategoriesListUnsorted : PartCategory[] = []\n\nconst partCategories : {[key:string]: PartCategory} = (categoriesData as PartCategoryData[])\n  .reduce((acc: {[key: string]: PartCategory}, categoryData: PartCategoryData) => {\n    acc[categoryData.id] = categoryData as PartCategory\n    partCategoriesListUnsorted.push(acc[categoryData.id])\n    return acc\n  }, {})\n\nexport default partCategories\n\nexport const partCategoriesList = partCategoriesListUnsorted.sort(sortBy('name'))\n\nexport const getPartCategory = (id: string) =>\n  partCategories[id] || {\n    id: '-1',\n    name: 'unknown'\n  }\n","import themesData from './raw/themes.json'\nimport type {Theme, Themes} from './types'\n\ntype ThemeData = {\n  id: string\n  name: string\n  parentId: string\n  numSets: number\n  yearFrom: number\n  yearTo: number\n}\n\nexport const themesList: Themes = (themesData as ThemeData[])\n\nexport default themesList.reduce((acc: any, theme: Theme) => { // TODO: type this any\n  return Object.assign(acc, {[theme.id]: theme})\n}, {} as {[key: string]: Theme})\n","import React from 'react'\nimport {StyleSheet, View} from 'react-native'\nimport {Card, Paragraph} from 'react-native-paper'\nimport {DrawerNavigationProp} from '@react-navigation/drawer'\nimport ScaledImage from '../../components/ScaledImage'\nimport type {Set} from '../../data/types'\nimport {RootStackParamList} from '../../navigation/types'\n\ntype SetPreviewProps = {\n  navigation: DrawerNavigationProp<RootStackParamList, 'Sets'>,\n  set: Set,\n  sortField?: string\n}\nexport default function SetPreview({navigation, set, sortField}: SetPreviewProps) {\n  return <Card key={set.setNum} style={styles.set} onPress={() => {\n    navigation.navigate('Set', {id: set.setNum})\n  }}>\n    <Card.Title title={set.name} />\n    <Card.Content style={{flexDirection: 'row'}}>\n      <ScaledImage\n        style={styles.image}\n        width={100}\n        source={{uri: set.image.imageURL}} />\n      <View style={{backgroundColor: 'none'}}>\n        <Paragraph>Set number:  {set.setNum}</Paragraph>\n        <Paragraph>Theme: {set.theme.name}</Paragraph>\n        <Paragraph>Parts: {set.numParts.toLocaleString()}</Paragraph>\n        <Paragraph>\n          Released in {set.year}\n          {set.LEGOCom.US.retailPrice ?\n            ` at $${set.LEGOCom.US.retailPrice.toLocaleString()} USD`\n            : ''\n          }\n        </Paragraph>\n        {sortField == '-ownedBy'\n          ? <Paragraph>Owned by {set.ownedBy.toLocaleString()} people on Brickset</Paragraph>\n          : null\n        }\n        {sortField == '-wantedBy'\n          ? <Paragraph>Wanted by {set.wantedBy.toLocaleString()} people on Brickset</Paragraph>\n          : null\n        }\n      </View>\n    </Card.Content>\n  </Card>\n}\n\nconst styles = StyleSheet.create({\n  set: {\n    marginBottom: 20\n  },\n  image: {\n    backgroundColor: 'gray',\n    marginRight: 10\n  }\n})\n","import React, {useEffect, useState} from 'react'\nimport {Image as DefaultImage} from 'react-native'\nimport Colors from '../constants/Colors'\nimport useColorScheme from '../hooks/useColorScheme'\n\ntype DefaultImageProps = React.ComponentProps<typeof DefaultImage>\ninterface ImageProps extends DefaultImageProps {\n  source: {uri: string};\n  maxWidth?: number;\n  maxHeight?: number;\n  width: number;\n  height?: number;\n  style?: any; // TODO: type this properly\n}\n\nconst ScaledImage = (props: ImageProps) => {\n  const {style, ...otherProps} = props,\n        [[width, height], setImageSize] = useState([props.width || 100, props.height || 100])\n  useEffect(() => {\n    DefaultImage.getSize(props.source.uri, (w, h) => {\n      if(props.width && !props.height) {\n        const newWidth = Math.min(props.width, props.maxWidth || Number.POSITIVE_INFINITY)\n        setImageSize([newWidth, h * (newWidth / w)])\n      } else if(!props.width && props.height) {\n        const newHeight = Math.min(props.height, props.maxHeight || Number.POSITIVE_INFINITY)\n        setImageSize([w * (newHeight / h), newHeight])\n      }\n    })\n  }, [])\n  return <DefaultImage style={[{\n    backgroundColor: Colors[useColorScheme()].background,\n    width,\n    height\n  },\n  style]} {...otherProps} />\n}\n\nexport default ScaledImage\n","import * as React from 'react'\nimport {View, Switch as DefaultSwitch, SwitchProps as DefaultSwitchProps} from 'react-native'\nimport {Text} from './Themed'\n\ninterface SwitchProps extends DefaultSwitchProps {\n  label: string\n}\n\nconst Switch = (props: SwitchProps) => {\n  return <View style={{flex: 1, flexDirection: 'row', marginTop: 10}}>\n    <Text style={{textAlign: 'right', position: 'relative', top: 2}}>{props.label}</Text>\n    <DefaultSwitch\n      onValueChange={props.onValueChange}\n      trackColor={{false: '#767577', true: '#81b0ff'}}\n      thumbColor={props.value ? '#30D5C8' : '#f4f3f4'}\n      ios_backgroundColor=\"#3e3e3e\"\n      value={props.value}\n    />\n  </View>\n}\n\nexport default Switch\n","import React from 'react'\nimport BaseSpinner from 'react-native-loading-spinner-overlay'\nimport useColorScheme from '../hooks/useColorScheme'\nimport Colors from '../constants/Colors'\n\nconst Spinner = ({visible, textContent = 'Loading ...'}: {visible: boolean, textContent?: string}) => {\n  const theme = useColorScheme(),\n        color = Colors[theme].text\n  return <BaseSpinner\n    visible={visible}\n    textContent={textContent}\n    color={color}\n    overlayColor=\"rgba(0,0,0,.8)\"\n    textStyle={{color}} />\n}\n\nexport default Spinner\n","import React from 'react'\nimport {Platform, View} from 'react-native'\nimport TextLink from './TextLink'\nimport {Text} from './Themed'\n\nconst RequireAPISupport = ({children}: {children: JSX.Element[] | JSX.Element}) => {\n  return <View>\n    {Platform.OS === 'web'\n      ? <Text>\n        Unfortunately API calls to sites like{' '}\n        <TextLink url=\"https://www.brickset.com\">Brickset</TextLink>\n        {' '}and{' '}\n        <TextLink url=\"https://www.rebrickable.com\">Rebrickable</TextLink>{' '}\n        do not work on the web platform at this time. Why not try the{' '}\n        <TextLink url=\"https://github.com/JeromeDane/brick-tools-for-lego#platforms--installation\">\n          Android version\n        </TextLink>{' '}\n        instead?\n      </Text>\n      : children\n    }\n  </View>\n}\n\nexport default RequireAPISupport\n","import 'react-native-gesture-handler'\nimport {registerRootComponent} from 'expo'\n\nimport App from './src/App'\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App)\n","import {useContext, useEffect, useMemo} from 'react'\nimport elementsData from './raw/elements.json'\nimport {useParts} from './parts'\nimport type {Element, Elements} from './types'\nimport {DataContext} from './DataProvider'\n\nconst elementsByPartColor : {[keys: string]: {[keys: string]: Element}} = {}\n\nlet previousElements: Elements\nexport const useElements = () => {\n  const context = useContext(DataContext),\n        parts = useParts()\n  useEffect(() => {\n    if(!context.elements || previousElements !== context.elements) {\n      previousElements = (elementsData as Element[]).reduce((acc, element) => {\n        acc[element.id] = element // TODO: do this without mutation\n        elementsByPartColor[element.partNum] = elementsByPartColor[element.partNum] || {}\n        elementsByPartColor[element.partNum][element.colorId] = element\n        return acc\n      }, {} as {[key: string]: Element})\n      context.setElements(previousElements)\n    }\n  }, [parts, previousElements])\n  return context.elements\n}\n\nexport const useElementsAsList = () => {\n  const elements = useElements()\n  return useMemo(\n    () => elements ? Object.keys(elements).map(id => elements[id]) : null,\n    [elements]\n  )\n}\n\nexport const useGetElementByPartAndColor = () => {\n  const elements = useElements()\n  return useMemo(\n    () => (partNum: string, colorId: string) =>\n      (elementsByPartColor[partNum] && elementsByPartColor[partNum][colorId]),\n    [elements]\n  )\n}\n","import * as React from 'react'\nimport {Linking} from 'react-native'\nimport {useTheme} from 'react-native-paper'\nimport {Text, TextProps} from './Themed'\n\ninterface TextLinkProps extends TextProps {\n  url?: string\n}\n\nconst TextLink = (props: TextLinkProps) => {\n  const theme = useTheme()\n  return <Text\n    {...Object.assign({}, props,\n      props.url ? {onPress: () => Linking.openURL(props.url!)} : {}\n    )}\n    style={[props.style, {color: theme.colors.primary}]} />\n}\n\nexport default TextLink\n","import {ColorSchemeName, useColorScheme as _useColorScheme} from 'react-native'\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>\n}\n","import {StatusBar} from 'expo-status-bar'\nimport React from 'react'\nimport {Appearance} from 'react-native'\nimport {SafeAreaProvider} from 'react-native-safe-area-context'\nimport DataProvider from './data/DataProvider'\nimport {DefaultTheme, DarkTheme, Provider as PaperProvider} from 'react-native-paper'\nimport useCachedResources from './hooks/useCachedResources'\nimport useColorScheme from './hooks/useColorScheme'\nimport Navigation from './navigation/Navigation'\n\nrequire('intl')\nrequire('intl/locale-data/jsonp/en.js')\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources(),\n        colorScheme = useColorScheme(),\n        BaseTheme = Appearance.getColorScheme() === 'dark' ? DarkTheme : DefaultTheme,\n        theme = {\n          ...BaseTheme,\n          colors: {\n            ...BaseTheme.colors,\n            primary: '#11C0D7'\n          }\n        }\n\n  if(!isLoadingComplete) {\n    return null\n  } else {\n    return (\n      <SafeAreaProvider>\n        <PaperProvider theme={theme}>\n          <DataProvider>\n            <Navigation colorScheme={colorScheme} />\n            <StatusBar />\n          </DataProvider>\n        </PaperProvider>\n      </SafeAreaProvider>\n    )\n  }\n}\n","import partsData from './raw/parts.json'\nimport {getPartCategory} from './part-categories'\nimport {Part, PartJSON} from './types'\nimport {getSubCategory} from './part-subcategories'\nimport {useContext, useEffect, useMemo} from 'react'\nimport {DataContext} from './DataProvider'\nimport colors from './colors'\n\nconst sizeRegex = /(\\d+)\\s?x\\s?(\\d+)(\\s?x\\s?(\\d+)([^/]|$))?/\n\nconst processedParts = (partsData as PartJSON[]).reduce(\n  (acc: {[key: string]: Part}, partData) => {\n    const size = partData.name.match(sizeRegex),\n          width = size ? parseInt(size[1].padStart(2) < size[2].padStart(2) ? size[1] : size[2]) : 0,\n          length = size ? parseInt((size[1].padStart(2) > size[2].padStart(2) ? size[1] : size[2])) : 0,\n          heightParsed = parseInt(size ? size[4] : ''),\n          height = isNaN(heightParsed) ? 0 : heightParsed\n    acc[partData.partNum] = {\n      ...partData,\n      nameSort: partData.name\n        .replace(sizeRegex, '  ')\n        .replace(/with|w\\//, ''),\n      width,\n      length,\n      height,\n      category: getPartCategory(partData.partCatId),\n      subCategory: getSubCategory(partData),\n      colors: partData.colorIds.map(id => colors[id])\n    } as Part\n    return acc\n  },\n  {}\n)\n\nconst UNKNOWN_PART: Part = {\n  partNum: '-1',\n  name: 'unknown part',\n  partMaterial: '',\n  nameSort: '',\n  width: 0,\n  length: 0,\n  height: 0,\n  category: {id: '-1', name: ''},\n  subCategory: '',\n  colors: []\n}\n\nexport const getPart = (partNum: string): Part => processedParts[partNum] || UNKNOWN_PART\n\nexport const useParts = () => {\n  const dataContext = useContext(DataContext)\n  useEffect(\n    () => {\n      if(!dataContext.parts) dataContext.setParts(processedParts)\n    },\n    []\n  )\n  return dataContext.parts\n}\n\nexport const usePart = (partNum: string) => {\n  const parts = useParts()\n  return parts ? parts[partNum] : UNKNOWN_PART\n}\n\nexport const usePartsAsLists = () => {\n  const parts = useParts()\n  return useMemo(\n    () => parts\n      ? Object.keys(parts).map(partNum => parts[partNum])\n      : [],\n    [parts]\n  )\n}\n\nexport const useGetPart = () => {\n  const parts = useParts()\n  return useMemo(\n    () => (partNum: string) => parts ? parts[partNum] : UNKNOWN_PART,\n    [parts]\n  )\n}\n","import {useContext, useEffect} from 'react'\nimport {useBricksetCollection} from '../api/brickset'\nimport setsData from './raw/sets.json'\nimport bricksetSets from './brickset/sets.json'\nimport themes from './themes'\nimport {DataContext} from './DataProvider'\nimport type {BricksetCollection} from './types'\n\ntype SetData = {\n  setNum: string;\n  name: string;\n  year: number;\n  themeId: string,\n  numParts: number,\n  setNumSort: number,\n  inventories: {\n    id: string,\n    version: string\n  }[]\n}\n\nconst emptyLEGOCom = {\n  retailPrice: 0,\n  dateFirstAvailable: '',\n  dateLastAvailable: ''\n}\n\nconst processSets = (bricksetCollection: BricksetCollection) => {\n  console.log(`processing sets against collection of ${Object.keys(bricksetCollection).length} items`)\n  return (setsData as SetData[])\n    .map(setData => {\n      const bricksetSet = bricksetSets[setData.setNum],\n            myCollection = bricksetCollection[setData.setNum]\n      return {\n        setNum: setData.setNum,\n        name: setData.name,\n        year: setData.year,\n        theme: themes[setData.themeId],\n        numParts: setData.numParts,\n        setNumSort: setData.setNumSort,\n        inventories: setData.inventories,\n        LEGOCom: bricksetSet ? bricksetSet.LEGOCom : {\n          US: emptyLEGOCom,\n          UK: emptyLEGOCom,\n          CA: emptyLEGOCom,\n          DE: emptyLEGOCom\n        },\n        ownedBy: bricksetSet ? (bricksetSet.collections.ownedBy || 0) : 0,\n        wantedBy: bricksetSet ? (bricksetSet.collections.wantedBy || 0) : 0,\n        image: {\n          imageURL: (bricksetSet && bricksetSet.image && bricksetSet.imageURL) || `https://images.brickset.com/sets/images/${setData.setNum}.jpg`,\n          thumbnailURL: (bricksetSet && bricksetSet.image && bricksetSet.thumbnailURL) || `https://images.brickset.com/sets/images/${setData.setNum}.jpg`\n        },\n        collection: {\n          owned: myCollection ? myCollection.owned : false,\n          wanted: myCollection ? myCollection.wanted : false,\n          qtyOwned: myCollection ? myCollection.qtyOwned : 0,\n          rating: myCollection ? myCollection.rating : 0,\n          notes: myCollection ? myCollection.notes : ''\n        },\n        bricksetID: bricksetSet ? bricksetSet.setID : -1\n      }\n    })\n}\n\nlet previousBricksetCollection: BricksetCollection\nexport const useSets = () => {\n  const {sets, setSets} = useContext(DataContext),\n        bricksetCollection = useBricksetCollection()\n  useEffect(() => {\n    // Note that the manual check to see if the collection has changed is\n    // necessary even though we're already in a use effect that's dependent\n    // on the bricksetCollection changing. useEffect is called on the first\n    // render of EACH COMPONENT WHERE IT IS USED. This would result in a\n    // re-processing of sets each time a new component is rendered that calls\n    // useSets() rather than the intended behavior of only re-processing\n    // sets when the collection has changed\n    if(bricksetCollection && bricksetCollection !== previousBricksetCollection) {\n      previousBricksetCollection = bricksetCollection\n      setSets(processSets(bricksetCollection))\n    }\n  }, [bricksetCollection])\n  return sets\n}\nexport const useSetSets = () => useContext(DataContext).setSets\nexport const useSet = (setNumber: string) => useSets().find(({setNum}) => setNum === setNumber)\n\nexport const useGetSet = () => (setNumber: string) => useSet(setNumber)\n","import {FontAwesome} from '@expo/vector-icons'\nimport * as Font from 'expo-font'\nimport * as SplashScreen from 'expo-splash-screen'\nimport * as React from 'react'\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false)\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync()\n\n        await Font.loadAsync({\n          ...FontAwesome.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf')\n        })\n      } catch(e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e)\n      } finally {\n        setLoadingComplete(true)\n        SplashScreen.hideAsync()\n      }\n    }\n\n    loadResourcesAndDataAsync()\n  }, [])\n\n  return isLoadingComplete\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";","/**\n * If you are not familiar with React Navigation, refer to the \"Fundamentals\" guide:\n * https://reactnavigation.org/docs/getting-started\n *\n */\n// import 'react-native-gesture-handler'\nimport {\n  AntDesign,\n  FontAwesome,\n  MaterialIcons,\n  MaterialCommunityIcons\n} from '@expo/vector-icons'\nimport {NavigationContainer, DefaultTheme, DarkTheme} from '@react-navigation/native'\nimport {createDrawerNavigator, DrawerItemList, DrawerContentScrollView} from '@react-navigation/drawer'\nimport {createNativeStackNavigator} from '@react-navigation/native-stack'\nimport * as React from 'react'\nimport {ColorSchemeName, Pressable} from 'react-native'\nimport {Text} from '../components/Themed'\nimport Colors from '../constants/Colors'\nimport useColorScheme from '../hooks/useColorScheme'\nimport AboutScreen from '../screens/AboutScreen'\nimport NotFoundScreen from '../screens/NotFoundScreen'\nimport ElementScreen from '../screens/element/ElementScreen'\nimport ThemesScreen from '../screens/ThemesScreen'\nimport PartScreen from '../screens/part/PartScreen'\nimport PartsScreen from '../screens/parts/PartsScreen'\nimport SetsScreen from '../screens/sets/SetsScreen'\nimport SettingsScreen from '../screens/SettingsScreen'\nimport {RootStackParamList, RootDrawerParamList} from './types'\nimport linking from './linking'\nimport SetTabs from '../screens/set/SetScreen'\n\n/**\n * A root stack navigator is often used for displaying modals on top of all other content.\n * https://reactnavigation.org/docs/modal\n */\nconst Stack = createNativeStackNavigator<RootStackParamList>(),\n      Drawer = createDrawerNavigator<RootDrawerParamList>()\n\n\nexport default function Navigation({colorScheme}: { colorScheme: ColorSchemeName }) {\n  return (\n    <NavigationContainer\n      linking={linking}\n      documentTitle={{\n        formatter: (options, route) =>\n          `${options?.title ?? route?.name} - Brick Tools for LEGO®`\n      }}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Root\" component={DrawerNav} options={{headerShown: false}} />\n        <Stack.Screen name=\"Element\" component={ElementScreen} />\n        <Stack.Screen name=\"Part\" component={PartScreen} />\n        <Stack.Screen name=\"Set\" component={SetTabs} />\n        <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{title: 'Oops!'}} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  )\n}\n\nconst MenuButton = ({navigation}: any) => {\n  const colorScheme = useColorScheme()\n  return <Pressable\n    onPress={() => navigation.toggleDrawer()}\n    style={({pressed}) => ({opacity: pressed ? 0.5 : 1})}>\n    <MaterialIcons\n      name=\"menu\"\n      size={25}\n      style={{marginLeft: 20}}\n      color={Colors[colorScheme].text}\n    />\n  </Pressable>\n}\n\nconst DrawerContent = (props: any) => {\n  return (\n    <DrawerContentScrollView {...props}>\n      <Text style={{padding: 20, fontWeight: 'bold'}}>Brick Tools for LEGO®</Text>\n      <DrawerItemList {...props} />\n    </DrawerContentScrollView>\n  )\n}\n\nconst DrawerNav = () => {\n  return <Drawer.Navigator initialRouteName=\"Sets\" drawerContent={(props) => <DrawerContent {...props} />}>\n    <Drawer.Screen\n      name=\"Sets\"\n      component={SetsScreen}\n      options={({navigation}) => ({\n        drawerIcon: ({color}) => <FontAwesome name=\"cubes\" size={20} color={color} />,\n        headerLeft: () => <MenuButton {...{navigation}} />\n      })} />\n    <Drawer.Screen\n      name=\"Themes\"\n      component={ThemesScreen}\n      options={({navigation}) => ({\n        drawerIcon: ({color}) => <AntDesign name=\"picture\" size={25} color={color} />,\n        headerLeft: () => <MenuButton {...{navigation}} />\n      })} />\n    <Drawer.Screen\n      name=\"Parts\"\n      component={PartsScreen}\n      options={({navigation}) => ({\n        drawerIcon: ({color}) => <MaterialCommunityIcons name=\"puzzle\" size={25} color={color} />,\n        headerLeft: () => <MenuButton {...{navigation}} />\n      })} />\n    <Drawer.Screen\n      name=\"Settings\"\n      component={SettingsScreen}\n      options={({navigation}) => ({\n        drawerIcon: ({color}) => <FontAwesome name=\"gear\" size={25} color={color} />,\n        headerLeft: () => <MenuButton {...{navigation}} />\n      })} />\n    <Drawer.Screen\n      name=\"About\"\n      component={AboutScreen}\n      options={({navigation}) => ({\n        drawerIcon: ({color}) => <AntDesign name=\"infocirlce\" size={25} color={color} />,\n        headerLeft: () => <MenuButton {...{navigation}} />\n      })} />\n  </Drawer.Navigator>\n}\n\n/**\n * You can explore the built-in icon families and icons on the web at https://icons.expo.fyi/\n */\n","import React, {createContext, useState, SetStateAction, Dispatch} from 'react'\nimport {BricksetCollection, Elements, Parts, Sets} from './types'\n\nconst errorIfSetterNotReady = () => {\n  console.error('Setter called before it was ready')\n}\n\ntype DataContext = {\n  bricksetCollection: BricksetCollection | null;\n  setBricksetCollection: Dispatch<SetStateAction<BricksetCollection|null>>;\n  elements: Elements | null,\n  setElements: Dispatch<SetStateAction<Elements|null>>;\n  isLoggedInToBrickset: boolean;\n  setIsLoggedInToBrickset: Dispatch<SetStateAction<boolean>>;\n  parts: Parts | null,\n  setParts: Dispatch<SetStateAction<Parts|null>>,\n  sets: Sets;\n  setSets: Dispatch<SetStateAction<Sets>>;\n}\n\nexport const DataContext = createContext({\n  bricksetCollection: null,\n  setBricksetCollection: errorIfSetterNotReady,\n  elements: null,\n  setElements: errorIfSetterNotReady,\n  isLoggedInToBrickset: false,\n  setIsLoggedInToBrickset: errorIfSetterNotReady,\n  parts: null,\n  setParts: errorIfSetterNotReady,\n  sets: [],\n  setSets: errorIfSetterNotReady\n} as DataContext)\n\nconst DataProvider = ({children}: {children: JSX.Element[] | JSX.Element}) => {\n  const [isLoggedInToBrickset, setIsLoggedInToBrickset] = useState(false),\n        [elements, setElements] = useState<Elements|null>(null),\n        [sets, setSets] = useState([] as Sets),\n        [bricksetCollection, setBricksetCollection] = useState<BricksetCollection|null>(null),\n        [parts, setParts] = useState<Parts|null>(null)\n  return <DataContext.Provider value={{\n    bricksetCollection,\n    setBricksetCollection,\n    elements,\n    setElements,\n    isLoggedInToBrickset,\n    setIsLoggedInToBrickset,\n    parts,\n    setParts,\n    sets,\n    setSets\n  }}>\n    {children}\n  </DataContext.Provider>\n}\n\nexport default DataProvider\n","const tintColorLight = '#2f95dc'\nconst tintColorDark = '#fff'\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark\n  }\n}\n","import * as React from 'react'\nimport {StyleSheet, Linking, ScrollView} from 'react-native'\nimport {Button, Card, Paragraph} from 'react-native-paper'\nimport TextLink from '../components/TextLink'\nimport {version} from '../../package.json'\n\nexport default function AboutScreen() {\n  return (\n    <ScrollView style={styles.container}>\n      <Card style={{marginBottom: 20}}>\n        <Card.Title title=\"Project Overview\" />\n        <Card.Content>\n          <Paragraph>\n            This project is free, open source, and maintained by volunteers out of a love of all things LEGO®.{' '}\n            If you&apos;d like to get involved in any way, check out this project&apos;s{' '}\n            <TextLink url=\"https://github.com/JeromeDane/brick-tools-for-lego\">\n              GitHub page\n            </TextLink>\n            . Show your ❤️ for this project:\n          </Paragraph>\n          <Button style={{marginTop: 10}} mode=\"contained\" icon=\"gift-outline\"\n            onPress={() => Linking.openURL('https://www.paypal.com/donate?hosted_button_id=LWSCPL34NZ6LJ')}>\n              Make a donation\n          </Button>\n          <Paragraph style={{marginTop: 20}}>\n            Version {version}\n          </Paragraph>\n          <Paragraph>\n            Author:{' '}\n            <TextLink url=\"https://www.linkedin.com/in/JeromeDane/\">\n              Jerome Dane\n            </TextLink>\n          </Paragraph>\n          <Paragraph style={{marginTop: 20}}>\n            Powered by data from{' '}\n            <TextLink url=\"https://www.brickset.com/\">Brickset.com</TextLink>\n            {' '}and{' '}\n            <TextLink url=\"https://www.rebrickable.com/\">Rebrickable.com</TextLink>\n          </Paragraph>\n          <Paragraph style={{marginTop: 20, fontStyle: 'italic'}}>\n            LEGO® is a trademark of the LEGO Group of companies which does not sponsor, authorize or endorse this project.\n          </Paragraph>\n        </Card.Content>\n      </Card>\n      <Card>\n        <Card.Title title=\"Project Links\" />\n        <Card.Content>\n          <Button icon=\"chart-gantt\" onPress={() => Linking.openURL('https://github.com/JeromeDane/brick-tools-for-lego/issues?q=is%3Aopen+is%3Aissue+label%3Aenhancement')}>\n            Planned features\n          </Button>\n          <Button icon=\"bug\" onPress={() => Linking.openURL('https://github.com/JeromeDane/brick-tools-for-lego/issues?q=is%3Aopen+is%3Aissue+label%3Abug')}>\n            Known bugs\n          </Button>\n          <Button icon=\"twitter\" onPress={() => Linking.openURL('https://twitter.com/BrickTools4LEGO')}>\n            @BrickTools4LEGO on Twitter\n          </Button>\n          <Button icon=\"reddit\" onPress={() => Linking.openURL('https://www.reddit.com/r/BrickToolsForLEGO/')}>\n            Reddit community: r/BrickToolsForLEGO/\n          </Button>\n        </Card.Content>\n      </Card>\n    </ScrollView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20\n  },\n  linkText: {\n    color: '#2e78b7'\n  },\n  paragraph: {\n    marginBottom: 20,\n    textAlign: 'center'\n  }\n})\n","import {useContext, useMemo} from 'react'\nimport AsyncStorage from '@react-native-async-storage/async-storage'\nimport Constants from 'expo-constants'\nimport formUrlEncode from 'form-urlencoded'\nimport {DataContext} from '../data/DataProvider'\nimport {BricksetCollection} from '../data/types'\nimport type {Set} from '../data/types'\n\nconst apiKey = Constants.manifest.extra.BRICKSET_API_KEY\n\n// Note: Normally I hate mutable variables, but I'll make an exception\n// here so that we don't get into a race condition with `useState` hooks\nlet userHash = ''\n\nconst api = (method: string, data: any) => {\n  return new Promise((resolve, reject) =>\n    fetch('https://brickset.com/api/v3.asmx/' + method, {\n      method: 'POST',\n      mode: 'cors',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept'\n      },\n      body: formUrlEncode(Object.assign({apiKey},\n        userHash ? Object.assign({}, data, {userHash}) : data\n      ))\n    })\n      .then(async response => {\n        const text = await response.text() || '{error: \"No response body\"}'\n        // console.log(text)\n        try {\n          resolve(JSON.parse(text))\n        } catch(e) {\n          console.warn(e)\n          console.warn(text)\n          reject(e)\n        }\n      })\n      .catch(e => {\n        console.log('ERROR: API request failed')\n        console.log(e)\n        reject(e)\n      })\n  )\n}\n\nconst BRICKSET_KEYS = {\n  userHash: 'bricktools-brickset-user-hash',\n  ownedSets: 'bricktools-brickset-owned-set-numbers'\n}\n\nconst useSaveCollection = () => {\n  const {setBricksetCollection} = useContext(DataContext)\n  return useMemo(() => async (updatedCollection: BricksetCollection) => {\n    console.log('saving collection')\n    setBricksetCollection(Object.assign({}, updatedCollection))\n    await AsyncStorage.setItem(BRICKSET_KEYS.ownedSets, JSON.stringify(updatedCollection))\n  }, [])\n}\n\nexport const useApi = () => api\n\nlet isLoggedInReadFromStorage = false\nexport const useIsLoggedInToBrickset = () => {\n  const {setIsLoggedInToBrickset} = useContext(DataContext)\n  if(!isLoggedInReadFromStorage) {  // can't use a useState hook here because it re-fires when used in different components\n    isLoggedInReadFromStorage = true\n    AsyncStorage.getItem(BRICKSET_KEYS.userHash)\n      .then(hash => {\n        setIsLoggedInToBrickset(Boolean(hash))\n        userHash = hash || ''\n      })\n  }\n  return useContext(DataContext).isLoggedInToBrickset\n}\n\nlet collectionRead = false\nexport const useBricksetCollection = () => {\n  const {bricksetCollection} = useContext(DataContext),\n        saveCollection = useSaveCollection()\n  if(!collectionRead) { // can't use a useState hook here because it re-fires when used in different components\n    collectionRead = true\n    AsyncStorage.getItem(BRICKSET_KEYS.ownedSets)\n      .then(result => saveCollection(result ? JSON.parse(result) : []))\n  }\n  return bricksetCollection\n}\n\nexport const useLogin = () => {\n  const {setIsLoggedInToBrickset} = useContext(DataContext)\n  return useMemo(() => (username: string, password: string) =>\n    new Promise((resolve, reject) =>\n      api('login', {username, password})\n        .then(async (response: any) => {\n          if(response.status === 'success') {\n            userHash = response.hash\n            setIsLoggedInToBrickset(true)\n            await AsyncStorage.setItem(BRICKSET_KEYS.userHash, response.hash)\n            resolve(null)\n          }\n          else {\n            // TODO: Add error handling\n            console.error('Error logging in to Brickset')\n            console.warn(JSON.stringify(response, null, 2))\n            reject(null)\n          }\n        })\n    )\n  , [])\n}\n\nexport const useLogOut = () => {\n  const {setIsLoggedInToBrickset} = useContext(DataContext)\n  return useMemo(() => async () => {\n    await Promise.all([\n      AsyncStorage.setItem(BRICKSET_KEYS.userHash, ''),\n      AsyncStorage.setItem(BRICKSET_KEYS.ownedSets, '')\n    ])\n    setIsLoggedInToBrickset(false)\n  }, [])\n}\n\nexport const useFetchBricksetCollection = () => {\n  const saveCollection = useSaveCollection()\n  return useMemo(() => async () => {\n    console.log('loading collection')\n    const parseCollection = async (result: any) => {\n      if(result.status === 'success') {\n        const setsData = result.sets.reduce((acc: {[key: string]: any}, set: any) => {\n          acc[set.number + '-' + set.numberVariant] = set.collection\n          return acc\n        }, {} as {[key: string]: any})\n        return setsData\n      }\n      else {\n        console.log(JSON.stringify(result, null, 2))\n        return null\n      }\n    }\n    const ownedResult = await api('getSets', {params: JSON.stringify({owned: 1, pageSize: 500})})\n      .then(parseCollection)\n    console.log(`Found ${Object.keys(ownedResult).length} owned sets`)\n    const wantedResult = await api('getSets', {params: JSON.stringify({wanted: 1, pageSize: 500})})\n      .then(parseCollection)\n    console.log(`Found ${Object.keys(wantedResult).length} wanted sets`)\n    saveCollection(Object.keys(wantedResult).reduce((acc, setNum) => {\n      if(acc[setNum]) acc[setNum].wanted = true\n      else acc[setNum] = wantedResult[setNum]\n      return acc\n    }, Object.assign({}, ownedResult)))\n    return null\n  },\n  [])\n}\nexport const useSetWanted = () => {\n  const bricksetCollection = useBricksetCollection(),\n        saveCollection = useSaveCollection()\n  return useMemo(() => async ({bricksetID, setNum}: Set, wanted: boolean) =>\n    api('setCollection', {\n      SetID: bricksetID,\n      params: JSON.stringify({want: wanted ? 1 : 0})\n    })\n      .then((response : any) => {\n        if(response.status == 'success') {\n          bricksetCollection[setNum] = bricksetCollection[setNum] || {\n            owned: false,\n            wanted: false,\n            qtyOwned: 0,\n            rating: 0,\n            notes: ''\n          }\n          bricksetCollection[setNum].wanted = wanted\n          console.log(`setting ${setNum} as wanted: ${wanted}`)\n          saveCollection(bricksetCollection)\n        }\n      })\n  , [])\n}\n\nexport const useSetOwned = () => {\n  const bricksetCollection = useBricksetCollection(),\n        saveCollection = useSaveCollection()\n  return useMemo(() => async ({bricksetID, setNum}: Set, qtyOwned: number) =>\n    api('setCollection', {\n      SetID: bricksetID,\n      params: JSON.stringify({qtyOwned, owned: qtyOwned > 0 ? 1 : 0})\n    })\n      .then((response : any) => {\n        if(response.status == 'success') {\n          bricksetCollection[setNum] = bricksetCollection[setNum] || {\n            owned: false,\n            wanted: false,\n            qtyOwned: 0,\n            rating: 0,\n            notes: ''\n          }\n          bricksetCollection[setNum].qtyOwned = qtyOwned\n          bricksetCollection[setNum].owned = qtyOwned > 0\n          console.log(`setting ${setNum} as owned: ${qtyOwned}`)\n          saveCollection(bricksetCollection)\n        }\n      })\n  , [])\n}\n","import * as React from 'react'\nimport {StyleSheet, TouchableOpacity} from 'react-native'\nimport {Text, View} from '../components/Themed'\n\nimport {RootStackScreenProps} from '../navigation/types'\n\nexport default function NotFoundScreen({navigation}: RootStackScreenProps<'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn&apos;t exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold'\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7'\n  }\n})\n","import {MaterialTopTabScreenProps, createMaterialTopTabNavigator} from '@react-navigation/material-top-tabs'\nimport React, {useEffect} from 'react'\nimport ElementDetails from './ElementDetails'\nimport ElementSets from './ElementSets'\nimport {RootStackParamList} from '../../navigation/types'\nimport {usePart} from '../../data/parts'\nimport {useGetElementByPartAndColor} from '../../data/elements'\nimport {useIsFocused} from '@react-navigation/native'\n\nexport type SetTabsParamList = {\n  SetDetails: {id: string};\n  SetInstructions: {id: string};\n  SetParts: {id: string};\n}\n\nconst Tab = createMaterialTopTabNavigator()\n\nconst ElementScreen = ({navigation: {setOptions}, route: {params}}: MaterialTopTabScreenProps<RootStackParamList, 'Element'>) => {\n  const part = usePart(params.partNum),\n        getElementByPartAndColor = useGetElementByPartAndColor(),\n        element = getElementByPartAndColor(params.partNum, params.colorId),\n        isFocused = useIsFocused()\n  useEffect(() => {\n    setOptions({title: part?.name})\n  }, [part, params.colorId])\n  return isFocused\n    ? <Tab.Navigator initialRouteName=\"ElementDetails\">\n      <Tab.Screen\n        name=\"ElementDetails\"\n        initialParams={params}\n        options={{title: 'Details'}}\n        component={ElementDetails} />\n      <Tab.Screen\n        name=\"ElementSets\"\n        initialParams={params}\n        options={{title: `Sets (${element.setNumbers.length.toLocaleString()})`}}\n        component={ElementSets} />\n    </Tab.Navigator>\n    : null\n}\n\nexport default ElementScreen\n","import React from 'react'\nimport {ScrollView, Image, Linking, ActivityIndicator, View} from 'react-native'\nimport {Button, Card, Paragraph} from 'react-native-paper'\nimport {RootStackScreenProps} from '../../navigation/types'\nimport {useGetElementByPartAndColor} from '../../data/elements'\nimport colors from '../../data/colors'\nimport TextLink from '../../components/TextLink'\nimport {usePart} from '../../data/parts'\n\nexport default function ElementDetails({navigation}: RootStackScreenProps<'Element'>) {\n  const {routes, index} = navigation.getState(),\n        getElementByPartAndColor = useGetElementByPartAndColor(),\n        part = usePart(routes[index].params.partNum),\n        color = colors[routes[index].params.colorId],\n        element = getElementByPartAndColor(routes[index].params.partNum, routes[index].params.colorId)\n  return <ScrollView style={{padding: 20}}>\n    {element\n      ? <View>\n        <Image\n          style={{marginBottom: 20, width: 192, height: 192, backgroundColor: 'gray'}}\n          source={{uri: `https://www.lego.com/cdn/product-assets/element.img.lod5photo.192x192/${element.id}.jpg`}} />\n        <Card style={{marginBottom: 20}}>\n          <Card.Title title={`${part.name}`} />\n          <Card.Content>\n            <Paragraph>Element ID: {element.id}</Paragraph>\n            <Paragraph>\n              Part Number:{' '}\n              <TextLink onPress={() => navigation.navigate('Part', {id: part.partNum})}>\n                {part.partNum}\n              </TextLink>\n            </Paragraph>\n            <Paragraph>Color: {color.name}</Paragraph>\n          </Card.Content>\n        </Card>\n        <Card>\n          <Card.Title title=\"Links\" />\n          <Card.Content>\n            <Button onPress={() =>\n              Linking.openURL(`https://brickset.com/parts/${element.id}/`)\n            }>\n              Brickset\n            </Button>\n            <Button onPress={() =>\n              Linking.openURL(`https://rebrickable.com/parts/${part.partNum}/something/${color.id}/`)\n            }>\n              Rebrickable\n            </Button>\n            <Button onPress={() =>\n              Linking.openURL(`https://www.bricklink.com/v2/catalog/catalogitem.page?P=${part.partNum}&idColor=` + colors[color.id].brickLink.id)\n            }>\n              BrickLink\n            </Button>\n          </Card.Content>\n        </Card>\n      </View>\n      : <ActivityIndicator color=\"#aaa\" />\n    }\n  </ScrollView>\n}\n","import {PartData} from './types'\n\nexport const getSubCategory = ({name, partCatId} : PartData) : string => {\n  switch(partCatId) {\n    case '32': // Bars, Ladders, and Fences\n      if(name.match(/Clip/i)) return 'Clip'\n      if(name.match(/Eye/i)) return 'Eye'\n      if(name.match(/Fence/i)) return 'Fence'\n      if(name.match(/Lever/i)) return 'Lever'\n      if(name.match(/Stair/i)) return 'Stair'\n      if(name.match(/Stop\\sRing/i)) return 'Stop Ring'\n      break\n    case '37': // Bricks Curved\n      if(name.match(/Arch/i)) return 'Arch'\n      break\n    case '20': // Bricks Round and Cones\n      if(name.match(/Cone/i)) return 'Cone'\n      if(name.match(/Dome/i)) return 'Dome'\n      break\n    case '3': // Bricks Sloped\n      if(name.match(/Inverted/i)) return 'Inverted'\n      if(name.match(/Slots/i)) return 'Slots'\n      break\n    case '5': // \"Bricks Special\n      if(name.match(/Bar|Handle/i)) return 'Bar'\n      if(name.match(/Clip/i)) return 'Clip'\n      if(name.match(/Headlight/i)) return 'Headlight'\n      if(name.match(/Masonry/i)) return 'Masonry'\n      if(name.match(/Pins/i)) return 'Pins'\n      if(name.match(/Studs.+(1|one)\\sSide/i)) return 'SNOT'\n      if(name.match(/Studs.+(2|two)\\sSide/i)) return 'SNOT, 2 sided'\n      if(name.match(/Studs.+(3|three)\\sSide/i)) return 'SNOT, 3 sided'\n      if(name.match(/Studs.+(4|four)\\sSide/i)) return 'SNOT, 4 sided'\n      break\n    case '7': // Containers\n      if(name.match(/Cupboard/i)) return 'Cupboard'\n      if(name.match(/Drawer/i)) return 'Drawer'\n      break\n    case '27': // Minifig Accessories\n      if(name.match(/Cup/i)) return 'Cup'\n      if(name.match(/Flame/i)) return 'Flame'\n      if(name.match(/Footwear/i)) return 'Footwear'\n      if(name.match(/Gun/i)) return 'Gun'\n      if(name.match(/Pan/i)) return 'Pan'\n      break\n    case '14': // Plates\n      if(name.match(/Corner/i)) return 'Corner'\n      break\n    case '9': // Plates Special\n      if(name.match(/Arm\\sUp/i)) return 'Arm Up'\n      if(name.match(/Bar|Handle/i)) return 'Bar'\n      if(name.match(/Bracket.+Inverted/i)) return 'Bracket Inverted'\n      if(name.match(/Bracket.+Pin.+Bottom/i)) return 'Bracket Pin Bottom'\n      if(name.match(/Bracket.+Vertical.+Studs/i)) return 'Bracket Vertical Studs'\n      if(name.match(/Bracket/i)) return 'Bracket'\n      if(name.match(/Clip/i)) return 'Clip'\n      if(name.match(/Cutout/i)) return 'Cutout'\n      if(name.match(/Hole/i)) return 'Hole'\n      if(name.match(/Jumper/i) && name.match(/Round/i)) return 'Jumper Round'\n      if(name.match(/Jumper/i)) return 'Jumper'\n      if(name.match(/Ladder/i)) return 'Ladder'\n      if(name.match(/pin\\sHole\\s(on\\s)Top/i)) return 'Pin Hole Top'\n      if(name.match(/Pin\\sHole/i)) return 'Pin Hole'\n      if(name.match(/Rail/i)) return 'Rail'\n      if(name.match(/1.?x.?4\\swith\\s2\\sStuds|Studs.+on.+edges/i)) return 'Studs on Edges'\n      if(name.match(/Tooth/i)) return 'Tooth'\n      if(name.match(/Towball/i)) return 'Towball'\n      break\n    case '21': // Plates Round Curved and Dishes\n      if(name.match(/Corner/i)) return 'Corner'\n      if(name.match(/Boat\\sStud/i)) return 'Boat Stud'\n      if(name.match(/Radar/i)) return 'Radar'\n      break\n    case '31': // String, Bands and Reels\n      if(name.match(/Chain/i)) return 'Chain'\n      if(name.match(/String.+Studs.+Grip/i)) return 'Studded String with Grips'\n      break\n    case '19': // Tiles\n      if(name.match(/Corner/i)) return 'Corner'\n      break\n    case '51': // Technic beams\n      if(name.match(/Thin/i)) return 'Thin'\n      break\n    case '15': // Tiles Special\n      if(name.match(/Clip/i)) return 'Clip'\n      if(name.match(/Grille/i)) return 'Grille'\n      if(name.match(/Gold\\sBar/i)) return 'Gold Bar'\n      if(name.match(/Inverted/i)) return 'Inverted' // must go before hole\n      if(name.match(/Hole/i)) return 'Hole'\n      if(name.match(/Hollow\\sBar/i)) return 'Hollow Bar'\n      break\n    case '67': // Tiles Round and Curved\n      if(name.match(/Half\\sCircle/i)) return 'Half Circle'\n      if(name.match(/Macaroni/i)) return 'Macaroni'\n      if(name.match(/Quarter/i)) return 'Quarter'\n      break\n  }\n  return ''\n}\n","// https://1.bp.blogspot.com/-aQauElTPaCg/YL_mdg37mqI/AAAAAAAAMQI/kcwwNj-Qr9EYV4HfnNnPJPtZc299246oACLcBGAsYHQ/s1600/Lego%2BColors%2Bpicture.jpg\n\nexport default [\n  'Black', // 0\",\n  'Chrome Black', // 64\",\n  'Speckle Black-Silver', // 132\",\n  'Dark Gray', // 8\",\n  'Dark Bluish Gray', // 72\",\n  'Light Bluish Gray', // 71\",\n  'Light Gray', // 7\",\n  'White', // 15\",\n  'Brown', // 6\",\n  'Tan', // 19\",\n  'Dark Tan', // 28\",\n  'Medium Dark Flesh', // 84\",\n  'Dark Brown', // 308\",\n  'Reddish Brown', // 70\",\n  'Red', // 4\",\n  'Orange', // 25\",\n  'Light Yellow', // 18\",\n  'Pearl Gold', // 297\",\n  'Yellow', // 14\",\n  'Bright Green', // 10\",\n  'Light Green', // 17\",\n  'Lime', // 27\",\n  'Green', // 2\",\n  'Sand Green', // 378\",\n  'Light Turquoise', // 11\",\n  'Dark Turquoise', // 3\",\n  'Light Blue', // 9\",\n  'Dark Azure', // 321\",\n  'Blue', // 1\",\n  'Purple', // 22\",\n  'Pink', // 13\",\n  'Dark Pink', // 5\",\n  'Salmon', // 12\",\n  'Light Violet', // 20\",\n  'Trans-Black', // 40\",\n  'Trans-Black IR Lens', // 32\",\n  'Trans-Clear', // 47\",\n  'Trans-Red', // 36\",\n  'Trans-Neon Orange', // 57\",\n  'Trans-Neon Yellow', // 54\",\n  'Trans-Yellow', // 46\",\n  'Trans-Neon Green', // 42\",\n  'Trans-Bright Green', // 35\",\n  'Trans-Green', // 34\",\n  'Trans-Very Lt Blue', // 43\",\n  'Trans-Light Blue', // 41\",\n  'Trans-Dark Blue', // 33\",\n  'Trans-Dark Pink', // 45\",\n  'Trans-Purple', // 52\",\n\n  'Glow In Dark Opaque', // 21\",\n  'Dark Blue-Violet', // 23\",\n  'Magenta', // 26\",\n  'Bright Pink', // 29\",\n  'Medium Lavender', // 30\",\n  'Lavender', // 31\",\n  'Chrome Antique Brass', // 60\",\n  'Chrome Blue', // 61\",\n  'Chrome Green', // 62\",\n  'Chrome Pink', // 63\",\n  'Very Light Orange', // 68\",\n  'Light Purple', // 69\",\n  'Medium Blue', // 73\",\n  'Medium Green', // 74\",\n  'Speckle Black-Copper', // 75\",\n  'Speckle DBGray-Silver', // 76\",\n  'Light Pink', // 77\",\n  'Light Flesh', // 78\",\n  'Milky White', // 79\",\n  'Metallic Silver', // 80\",\n  'Metallic Green', // 81\",\n  'Metallic Gold', // 82\",\n  'Dark Purple', // 85\",\n  'Dark Flesh', // 86\",\n  'Royal Blue', // 89\",\n  'Flesh', // 92\",\n  'Light Salmon', // 100\",\n  'Violet', // 110\",\n  'Blue-Violet', // 112\",\n  'Glitter Trans-Dark Pink', // 114\",\n  'Medium Lime', // 115\",\n  'Glitter Trans-Clear', // 117\",\n  'Aqua', // 118\",\n  'Light Lime', // 120\",\n  'Light Orange', // 125\",\n  'Glitter Trans-Purple', // 129\",\n  'Speckle Black-Gold', // 133\",\n  'Copper', // 134\",\n  'Pearl Light Gray', // 135\",\n  'Metal Blue', // 137\",\n  'Pearl Light Gold', // 142\",\n  'Trans-Medium Blue', // 143\",\n  'Pearl Dark Gray', // 148\",\n  'Pearl Very Light Gray', // 150\",\n  'Very Light Bluish Gray', // 151\",\n  'Yellowish Green', // 158\",\n  'Flat Dark Gold', // 178\",\n  'Flat Silver', // 179\",\n  'Trans-Orange', // 182\",\n  'Pearl White', // 183\",\n  'Bright Light Orange', // 191\",\n  'Bright Light Blue', // 212\",\n  'Rust', // 216\",\n  'Bright Light Yellow', // 226\",\n  'Trans-Pink', // 230\",\n  'Sky Blue', // 232\",\n  'Trans-Light Purple', // 236\",\n  'Dark Blue', // 272\",\n  'Dark Green', // 288\",\n  'Glow In Dark Trans', // 294\",\n  'Maersk Blue', // 313\",\n  'Dark Red', // 320\",\n  'Medium Azure', // 322\",\n  'Light Aqua', // 323\",\n  'Olive Green', // 326\",\n  'Chrome Gold', // 334\",\n  'Sand Red', // 335\",\n  'Medium Dark Pink', // 351\",\n  'Earth Orange', // 366\",\n  'Sand Purple', // 373\",\n  'Sand Blue', // 379\",\n  'Chrome Silver', // 383\",\n  'Fabuland Brown', // 450\",\n  'Medium Orange', // 462\",\n  'Dark Orange', // 484\",\n  'Very Light Gray', // 503\",\n  'Glow in Dark White', // 1000\",\n  'Medium Violet', // 1001\",\n  'Glitter Trans-Neon Green', // 1002\",\n  'Glitter Trans-Light Blue', // 1003\",\n  'Trans-Flame Yellowish Orange', // 1004\",\n  'Trans-Fire Yellow', // 1005\",\n  'Trans-Light Royal Blue', // 1006\",\n  'Reddish Lilac', // 1007\",\n  'Vintage Blue', // 1008\",\n  'Vintage Green', // 1009\",\n  'Vintage Red', // 1010\",\n  'Vintage Yellow', // 1011\",\n  'Fabuland Orange', // 1012\",\n  'Modulex White', // 1013\",\n  'Modulex Light Bluish Gray', // 1014\",\n  'Modulex Light Gray', // 1015\",\n  'Modulex Charcoal Gray', // 1016\",\n  'Modulex Tile Gray', // 1017\",\n  'Modulex Black', // 1018\",\n  'Modulex Tile Brown', // 1019\",\n  'Modulex Terracotta', // 1020\",\n  'Modulex Brown', // 1021\",\n  'Modulex Buff', // 1022\",\n  'Modulex Red', // 1023\",\n  'Modulex Pink Red', // 1024\",\n  'Modulex Orange', // 1025\",\n  'Modulex Light Orange', // 1026\",\n  'Modulex Light Yellow', // 1027\",\n  'Modulex Ochre Yellow', // 1028\",\n  'Modulex Lemon', // 1029\",\n  'Modulex Pastel Green', // 1030\",\n  'Modulex Olive Green', // 1031\",\n  'Modulex Aqua Green', // 1032\",\n  'Modulex Teal Blue', // 1033\",\n  'Modulex Tile Blue', // 1034\",\n  'Modulex Medium Blue', // 1035\",\n  'Modulex Pastel Blue', // 1036\",\n  'Modulex Violet', // 1037\",\n  'Modulex Pink', // 1038\",\n  'Modulex Clear', // 1039\",\n  'Modulex Foil Dark Gray', // 1040\",\n  'Modulex Foil Light Gray', // 1041\",\n  'Modulex Foil Dark Green', // 1042\",\n  'Modulex Foil Light Green', // 1043\",\n  'Modulex Foil Dark Blue', // 1044\",\n  'Modulex Foil Light Blue', // 1045\",\n  'Modulex Foil Violet', // 1046\",\n  'Modulex Foil Red', // 1047\",\n  'Modulex Foil Yellow', // 1048\",\n  'Modulex Foil Orange', // 1049\",\n  'Coral', // 1050\",\n  'Pastel Blue', // 1051\",\n  'Glitter Trans-Orange', // 1052\",\n  'Trans-Blue Opal', // 1053\",\n  'Trans-Medium Reddish Violet Opal', // 1054\",\n  'Trans-Clear Opal', // 1055\",\n  'Trans-Brown Opal', // 1056\",\n  'Trans-Light Bright Green', // 1057\",\n  'Trans-Light Green', // 1058\",\n  'Trans-Purple Opal', // 1059\",\n  'Trans-Green Opal', // 1060\",\n  'Trans-Dark Blue Opal', // 1061\",\n  'Lemon', // 1062\",\n  '[No Color/Any Color]' // 9999\"\n]\n","import React, {useRef, useState} from 'react'\nimport {ScrollView, ActivityIndicator, View} from 'react-native'\nimport {RootStackScreenProps} from '../../navigation/types'\nimport {useGetElementByPartAndColor} from '../../data/elements'\nimport {useGetSet} from '../../data/sets'\nimport SetPreview from '../sets/SetPreview'\nimport Paginator from '../../components/Paginator'\n\nexport default function ElementSets({navigation}: RootStackScreenProps<'Element'>) {\n  const {routes, index} = navigation.getState(),\n        getElementByPartAndColor = useGetElementByPartAndColor(),\n        element = getElementByPartAndColor(routes[index].params.partNum, routes[index].params.colorId),\n        getSet = useGetSet(),\n        [pageSize, setPageSize] = useState(25),\n        [currentPage, setCurrentPage] = useState(0),\n        scrollRef = useRef()\n  return <ScrollView style={{padding: 20}} ref={scrollRef}>\n    {element\n      ? <View>\n        {element.setNumbers.slice(currentPage * pageSize, currentPage * pageSize + pageSize).map(setNumber => {\n          const set = getSet(setNumber)\n          return set\n            ? <SetPreview key={setNumber} set={set} navigation={navigation}/>\n            : null\n        })}\n        {element.setNumbers.length\n          ? <Paginator\n            pageSize={pageSize}\n            numItems={element.setNumbers.length}\n            onPageSizeChange={value => setPageSize(parseInt(value.toString()))}\n            onPageChange={val => {\n              scrollRef.current.scrollTo({y: 0, animated: true})\n              setCurrentPage(val)\n            }}\n            selectedValue={currentPage} />\n          : null\n        }\n      </View>\n      : <ActivityIndicator color=\"#aaa\" />\n    }\n    <View style={{height: 50}} />\n  </ScrollView>\n}\n","import React from 'react'\nimport {ScrollView, StyleSheet} from 'react-native'\nimport {sortBy} from 'sort-by-typescript'\nimport {Text} from '../components/Themed'\nimport themes from '../data/raw/themes.json'\nimport LoadingWrapper from '../components/LoadingWrapper'\n\nexport default function TabsScreen() {\n  return (\n    <ScrollView style={styles.container}>\n      <LoadingWrapper>\n        {themes\n          .filter(({parentId}) => !parentId)\n          .sort(sortBy('name'))\n          .map(theme =>\n            <Text key={theme.id} style={styles.theme}>\n              {theme.name} (\n              {theme.yearFrom ? '' + theme.yearFrom + '' : ''}\n              {theme.yearTo ? '-' + theme.yearTo + '' : ''}\n              {(theme.yearFrom || theme.yearTo) ? ', ' : ''}\n              {theme.numSets} sets)\n            </Text>\n          )\n        }\n      </LoadingWrapper>\n    </ScrollView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20\n  },\n  theme: {\n    textAlign: 'left',\n    paddingVertical: 10\n  }\n})\n","import React, {useEffect} from 'react'\nimport {ScrollView, Image, ActivityIndicator, View} from 'react-native'\nimport {RootStackScreenProps} from '../../navigation/types'\nimport {usePart} from '../../data/parts'\nimport {useGetElementByPartAndColor} from '../../data/elements'\nimport {Card, Headline, Paragraph} from 'react-native-paper'\nimport ElementPreview from './ElementPreview'\n\nexport default function Part({navigation}: RootStackScreenProps<'Part'>) {\n  const {routes, index} = navigation.getState(),\n        part = usePart(routes[index].params.id),\n        getElementByPartAndColor = useGetElementByPartAndColor(),\n        defaultColor = part?.colors[0],\n        element = part && defaultColor && getElementByPartAndColor(part.partNum, defaultColor.id)\n  useEffect(() => {\n    if(part) {\n      navigation.setOptions({title: part.name})\n    }\n  }, [part])\n  return <ScrollView style={{padding: 20}}>\n    {part\n      ? <View>\n        <Image\n          style={{marginBottom: 20, width: 192, height: 192, backgroundColor: 'gray'}}\n          source={{uri: `https://www.lego.com/cdn/product-assets/element.img.lod5photo.192x192/${element.id}.jpg`}} />\n        <Card style={{marginBottom: 20}}>\n          <Card.Title title=\"Part Details\" />\n          <Card.Content>\n            <Paragraph>Part Number: {part.partNum}</Paragraph>\n            <Paragraph>Name: {part.name}</Paragraph>\n            <Paragraph>Colors: {part.colors.length}</Paragraph>\n          </Card.Content>\n        </Card>\n        <Headline style={{marginBottom: 20}}>Colors</Headline>\n        {part.colors.map(color => {\n          const element = getElementByPartAndColor(part.partNum, color.id)\n          return <ElementPreview\n            key={element.id}\n            color={color}\n            part={part}\n            onPress={() => { navigation.navigate('Element', {partNum: part.partNum, colorId: color.id})}} />\n        })}\n      </View>\n      : <ActivityIndicator color=\"#aaa\" />\n    }\n  </ScrollView>\n}\n","import React from 'react'\nimport {Image, View} from 'react-native'\nimport {Card, Paragraph} from 'react-native-paper'\nimport type {Color} from '../../data/colors'\nimport type {Part} from '../../data/types'\nimport {useGetElementByPartAndColor} from '../../data/elements'\n\ntype ElementPreviewProps = {\n  part: Part;\n  color: Color;\n  onPress: () => void;\n}\n\nexport default function ElementPreview({onPress, part, color}: ElementPreviewProps) {\n  const getElementByPartAndColor = useGetElementByPartAndColor(),\n        {id, setNumbers} = getElementByPartAndColor(part.partNum, color.id)\n  return <Card style={{marginBottom: 20}} onPress={() => onPress()}>\n    <Card.Title title={part.name} />\n    <Card.Content style={{flexDirection: 'row'}}>\n      <Image\n        style={{marginRight: 10, width: 100, height: 100, backgroundColor: 'gray'}}\n        source={{uri: `https://www.lego.com/cdn/product-assets/element.img.lod5photo.192x192/${id}.jpg`}} />\n      <View>\n        <Paragraph>Part: {part.partNum} Element: {id}</Paragraph>\n        <Paragraph>{part.category.name}{part.subCategory ? ', ' + part.subCategory : ''}</Paragraph>\n        <Paragraph>{color.name} ({color.id})</Paragraph>\n        <Paragraph>Sets: {setNumbers.length.toLocaleString()}</Paragraph>\n      </View>\n    </Card.Content>\n  </Card>\n}\n","import React, {useEffect, useMemo, useRef, useState} from 'react'\nimport {ScrollView} from 'react-native'\nimport {sortBy} from 'sort-by-typescript'\nimport {Text, View} from '../../components/Themed'\nimport Paginator from '../../components/Paginator'\nimport TextInput from '../../components/TextInput'\nimport {usePartsAsLists} from '../../data/parts'\nimport {colorsList} from '../../data/colors'\nimport {partCategoriesList} from '../../data/part-categories'\nimport Switch from '../../components/Switch'\nimport LoadingWrapper from '../../components/LoadingWrapper'\nimport PartPreview from './PartPreview'\nimport Select from '../../components/Select'\nimport {RootStackScreenProps} from '../../navigation/types'\n\nconst PartsScreen = ({navigation} : RootStackScreenProps<'Element'>) => {\n  const defaultSortOrder = 'category.name,subCategory,width,length,height',\n        [sortOrder, setSortOrder] = useState(defaultSortOrder),\n        [partCategory, setPartCategory] = useState(''),\n        [colorFilter, setColorFilter] = useState(''),\n        [showPrints, setShowPrints] = useState(false),\n        [pageSize, setPageSize] = useState(25),\n        [isSorting, setIsSorting] = useState(true),\n        [currentPage, setCurrentPage] = useState(0),\n        [filterBy, setFilterBy] = useState(''),\n        scrollRef = useRef(),\n        partsList = usePartsAsLists(),\n        sortedParts = useMemo(\n          () => (!isSorting && partsList)\n            ? [...partsList].sort(sortBy.apply(sortBy, sortOrder.split(',')))\n            : null,\n          [partsList, sortOrder, isSorting]\n        ),\n        filteredParts = useMemo(\n          () => sortedParts ?\n            sortedParts.filter(part => {\n              return (part.colors.length > 0) &&\n                    (!filterBy || (part.partNum + part.name).toLowerCase().match(filterBy.toLowerCase())) &&\n                    (!partCategory || part.category.id == partCategory) &&\n                    (showPrints || !part.partNum.match('pr')) &&\n                    (!colorFilter || part.colors.find(({id}) => id == colorFilter))\n            })\n            : null,\n          [sortedParts, showPrints, colorFilter, partCategory, filterBy]\n        )\n  useEffect(() => {\n    if(isSorting) setIsSorting(false)\n  }, [isSorting])\n  return (\n    <ScrollView ref={scrollRef} style={{\n      paddingBottom: 100,\n      padding: 20,\n      flex: 1,\n      flexGrow: 1\n    }}>\n      <LoadingWrapper loading={!filteredParts}>\n        <View style={{marginBottom: 20}}>\n          <TextInput\n            autoComplete={false}\n            label=\"Search Parts\"\n            clearable\n            value={filterBy}\n            onChangeText={value => {\n              setCurrentPage(0)\n              setFilterBy(value)\n            }} />\n        </View>\n        <View style={{marginBottom: 20}}>\n          <Select\n            label=\"Sort by\"\n            value={sortOrder}\n            onValueChange={value => {\n              setIsSorting(true)\n              setCurrentPage(0)\n              setSortOrder(value.toString())\n            }}\n            items={[\n              {label: 'Category, size', value: defaultSortOrder},\n              {label: 'Size, category', value: 'width,length,height,category.name,subCategory'},\n              {label: 'Size descending, category', value: '-width,-length,-height,category.name,subCategory'}\n            ]}/>\n        </View>\n        <View style={{marginBottom: 20}}>\n          <Select\n            label=\"Category\"\n            value={partCategory}\n            onValueChange={value => {\n              setCurrentPage(0)\n              setPartCategory(value.toString())\n            }}\n            items={[{label: 'All themes', value: ''}].concat(partCategoriesList.sort(sortBy('name')).map(\n              ({id, name}) => ({label: name, value: id})\n            ))} />\n        </View>\n        <View style={{marginBottom: 20}}>\n          <Select\n            label=\"Color\"\n            value={colorFilter}\n            onValueChange={value => {\n              setCurrentPage(0)\n              setColorFilter(value.toString())\n            }}\n            items={[{label: 'All available colors', value: ''}].concat(colorsList.map(\n              ({id, name}) => ({label: name, value: id})\n            ))} />\n        </View>\n        <View style={{marginBottom: 20}}>\n          <View style={{alignItems: 'flex-end'}}>\n            <Switch\n              label=\"Show printed parts\"\n              onValueChange={setShowPrints}\n              value={showPrints} />\n          </View>\n        </View>\n        <LoadingWrapper loading={isSorting || !filteredParts}>\n          {filteredParts?.length\n            ? filteredParts\n              .slice(currentPage * pageSize, currentPage * pageSize + pageSize)\n              .map((part, i: number) =>\n                <PartPreview\n                  part={part}\n                  key={i}\n                  defaultColorId={colorFilter}\n                  onPress={id => { navigation.navigate('Part', {id})}}/>\n              )\n            : <Text style={{paddingVertical: 20}}>No parts found matching your criteria.</Text>\n          }\n          <View style={{paddingTop: 20}}>\n            <Paginator\n              pageSize={pageSize}\n              numItems={filteredParts?.length || 0}\n              onPageSizeChange={setPageSize}\n              onPageChange={(val : number) => {\n                scrollRef.current?.scrollTo({y: 0, animated: true})\n                setCurrentPage(val)\n              }}\n              selectedValue={currentPage} />\n          </View>\n        </LoadingWrapper>\n      </LoadingWrapper>\n      <View style={{height: 50}} />\n    </ScrollView>\n  )\n}\n\nexport default PartsScreen\n","import React from 'react'\nimport {Image, View} from 'react-native'\nimport {Card, Paragraph} from 'react-native-paper'\nimport {useGetElementByPartAndColor} from '../../data/elements'\nimport {Part} from '../../data/types'\n\ntype PartPreviewProps = {\n  defaultColorId: string;\n  part: Part;\n  onPress: (partNum: string) => void\n}\n\nconst PartPreview = ({defaultColorId, part, onPress}: PartPreviewProps) => {\n  const getElementByPartAndColor = useGetElementByPartAndColor(),\n        defaultColor = part.colors.find(({id}) => id == defaultColorId) || part.colors[0],\n        element = defaultColor && getElementByPartAndColor(part.partNum, defaultColor.id)\n  return <Card style={{marginBottom: 20}} onPress={() => onPress(part.partNum)}>\n    <Card.Title title={part.name} />\n    <Card.Content style={{flexDirection: 'row'}}>\n      {element &&\n        <Image\n          style={{marginRight: 10, width: 100, height: 100, backgroundColor: 'gray'}}\n          source={{uri: `https://www.lego.com/cdn/product-assets/element.img.lod5photo.192x192/${element.id}.jpg`}} />\n      }\n      <View>\n        <Paragraph>{part.category.name}{part.subCategory ? ', ' + part.subCategory : ''}</Paragraph>\n        <Paragraph>Part Number: {part.partNum}</Paragraph>\n        <Paragraph>Colors: {part.colors.length}</Paragraph>\n      </View>\n    </Card.Content>\n  </Card>\n}\n\nexport default PartPreview\n","import React, {useEffect, useMemo, useRef, useState} from 'react'\nimport {ActivityIndicator, ScrollView} from 'react-native'\nimport {sortBy} from 'sort-by-typescript'\nimport {DrawerScreenProps} from '@react-navigation/drawer'\nimport {Text, View} from '../../components/Themed'\nimport Paginator from '../../components/Paginator'\nimport Select from '../../components/Select'\nimport TextInput from '../../components/TextInput'\nimport LoadingWrapper from '../../components/LoadingWrapper'\nimport {RootStackParamList} from '../../navigation/types'\nimport {useSets} from '../../data/sets'\nimport {themesList} from '../../data/themes'\nimport {useIsLoggedInToBrickset} from '../../api/brickset'\nimport TextLink from '../../components/TextLink'\nimport SetPreview from './SetPreview'\n\nexport default function SetsScreen({navigation}: DrawerScreenProps<RootStackParamList, 'Sets'>) {\n  const [sortField, setSortField] = useState('-year'),\n        [pageSize, setPageSize] = useState(25),\n        [filterBy, setFilterBy] = useState(''),\n        [theme, setTheme] = useState(''),\n        [isSorting, setIsSorting] = useState(true),\n        [collectionFilter, setCollectionFilter] = useState(''),\n        [currentPage, setCurrentPage] = useState(0),\n        isLoggedInToBrickset = useIsLoggedInToBrickset(),\n        scrollRef = useRef(),\n        sets = useSets(),\n        sortedSets = useMemo(\n          () => isSorting ? [] : [...sets].sort(sortBy.apply(sortBy, sortField.split(','))),\n          [isSorting, sets, sortBy]\n        ),\n        filteredSets = useMemo(\n          () => sortedSets.filter(set =>\n            (!filterBy || (set.setNum + set.name).toLowerCase().match(filterBy.toLowerCase())) &&\n            (!theme || set.theme.id == theme) &&\n            (!isLoggedInToBrickset || !collectionFilter ||\n              (collectionFilter == 'owned' && set.collection.qtyOwned > 0) ||\n              (collectionFilter == 'not-owned' && set.collection.qtyOwned === 0) ||\n              (collectionFilter == 'wanted' && set.collection.wanted) ||\n              (collectionFilter == 'not-wanted' && !set.collection.wanted) ||\n              (collectionFilter == 'not-wanted-not-owned' && !set.collection.wanted && set.collection.qtyOwned === 0)\n            )),\n          [sortedSets, filterBy, collectionFilter, theme]\n        )\n  useEffect(() => {\n    if(isSorting) setIsSorting(false)\n  }, [isSorting])\n  return (\n    <ScrollView ref={scrollRef} style={{\n      padding: 20,\n      paddingBottom: 100\n    }}>\n      <LoadingWrapper>\n        <View>\n          <TextInput\n            clearable\n            label=\"Search Sets\"\n            autoComplete={false}\n            value={filterBy}\n            onChangeText={value => {\n              setCurrentPage(0)\n              setFilterBy(value)\n            }} />\n        </View>\n        <View style={{marginVertical: 15}}>\n          <Select\n            label=\"Theme\"\n            value={theme}\n            onValueChange={theme => {\n              setCurrentPage(0)\n              setTheme(theme.toString())\n            }}\n            items={[{label: 'All themes', value: ''}].concat([...themesList].sort(sortBy('name')).map(theme =>({\n              label: `${theme.name} (${theme.numSets.toLocaleString()} sets)`,\n              value: theme.id\n            })))} />\n        </View>\n        <View style={{marginBottom: 0}}>\n          <Select\n            label=\"Sort by\"\n            value={sortField}\n            onValueChange={field => {\n              setIsSorting(true)\n              setCurrentPage(0)\n              setSortField(field.toString())\n            }}\n            items={[\n              {label: 'Set Number', value: 'setNumSort'},\n              {label: 'Set Number (desc)', value: '-setNumSort'},\n              {label: 'Most Owned', value: '-ownedBy'},\n              {label: 'Most Wanted', value: '-wantedBy'},\n              {label: 'Name', value: 'name'},\n              {label: 'Name (desc)', value: '-name'},\n              {label: 'Parts', value: 'numParts'},\n              {label: 'Parts (desc)', value: '-numParts'},\n              {label: 'Retail Price', value: 'LEGOCom.US.retailPrice'},\n              {label: 'Retail Price (desc)', value: '-LEGOCom.US.retailPrice'},\n              {label: 'Year Released', value: 'year'},\n              {label: 'Year Released (desc)', value: '-year'}\n            ]} />\n        </View>\n        {isLoggedInToBrickset\n          ? <View style={{marginVertical: 20}}>\n            <Select\n              label=\"Collection\"\n              value={collectionFilter}\n              onValueChange={value => {\n                setCurrentPage(0)\n                setCollectionFilter(value.toString())\n              }}\n              items={[\n                {label: 'Any', value: ''},\n                {label: 'Owned', value: 'owned'},\n                {label: 'Not owned', value: 'not-owned'},\n                {label: 'Wanted', value: 'wanted'},\n                {label: 'Not Wanted', value: 'not-wanted'},\n                {label: 'Not Wanted and Not Owned', value: 'not-wanted-not-owned'}\n              ]}/>\n          </View>\n          : <TextLink\n            style={{marginTop: 10, marginBottom: 20}}\n            onPress={() => navigation.navigate('Settings')}>\n            Log into Brickset to filter by sets you own.\n          </TextLink>\n        }\n        {filteredSets.length\n          ? filteredSets\n            .slice(currentPage * pageSize, currentPage * pageSize + pageSize)\n            .map(set => <SetPreview key={set.setNum} {...{set, navigation, sortField}} />)\n          : <Text style={{textAlign: 'center'}}>\n            {(isSorting || sets.length == 0)\n              ? <ActivityIndicator size=\"large\" color=\"#aaaa\" />\n              : 'No results match your search criteria'\n            }\n          </Text>\n        }\n        <View style={{height: 20}} />\n        {filteredSets.length\n          ? <Paginator\n            pageSize={pageSize}\n            numItems={filteredSets.length}\n            onPageSizeChange={setPageSize}\n            onPageChange={(val : number) => {\n              scrollRef.current.scrollTo({y: 0, animated: true})\n              setCurrentPage(val)\n            }}\n            selectedValue={currentPage} />\n          : null\n        }\n        <View style={{height: 50}} />\n      </LoadingWrapper>\n    </ScrollView>\n  )\n}\n","import React, {useState} from 'react'\nimport {ScrollView, View} from 'react-native'\nimport {Button, Card, Paragraph} from 'react-native-paper'\nimport Spinner from '../components/Spinner'\nimport TextInput from '../components/TextInput'\nimport {useBricksetCollection, useFetchBricksetCollection, useLogin, useLogOut} from '../api/brickset'\nimport {useIsLoggedInToBrickset} from '../api/brickset'\nimport TextLink from '../components/TextLink'\nimport RequireAPISupport from '../components/APISupport'\n\nexport default function SettingsScreen() {\n  const [username, setUsername] = useState(''),\n        [password, setPassword] = useState(''),\n        [loadingMessage, setLoadingMessage] = useState(''),\n        collection = useBricksetCollection(),\n        login = useLogin(),\n        logOut = useLogOut(),\n        isLoggedIn = useIsLoggedInToBrickset(),\n        fetchBricksetCollection = useFetchBricksetCollection()\n  return (\n    <ScrollView style={{padding: 20}}>\n      <Spinner visible={Boolean(loadingMessage)} textContent={loadingMessage} />\n      <RequireAPISupport>\n        <Card>\n          <Card.Title title=\"Brickset\" />\n          <Card.Content>\n            {isLoggedIn\n              ? <View>\n                <Paragraph style={{marginBottom: 20}}>\n                    Found {Object.keys(collection || {}).length.toLocaleString()} sets you have tracked on Brickset. Any changes\n                    you make in this app will be automatically synced back to Brickset as long as you remain logged in.\n                </Paragraph>\n                <Button icon=\"sync\" mode=\"contained\" style={{marginBottom: 20}} onPress={() => {\n                  setLoadingMessage('Syncing collection from Brickset ...')\n                  fetchBricksetCollection()\n                    .then(() => setLoadingMessage(''))\n                    .catch(() => setLoadingMessage(''))\n                }}>\n                  Re-sync my collection\n                </Button>\n                <Button icon=\"logout\" mode=\"contained\" onPress={() => {\n                  setLoadingMessage('Logging out from Brickset ...')\n                  logOut()\n                    .then(() => setLoadingMessage(''))\n                    .catch(() => setLoadingMessage(''))\n                }}>\n                  Log out\n                </Button>\n              </View>\n              : <View>\n                <Paragraph style={{marginBottom: 10}}>\n                  Log into your{' '}\n                  <TextLink url=\"https://www.brickset.com\">Brickset.com</TextLink>{' '}\n                  account to access your personal data. If you don&apos;t already have one, you&apos;ll need to{' '}\n                  <TextLink url=\"https://brickset.com/signup\">create an account</TextLink>.\n                </Paragraph>\n                <TextInput label=\"Username\" onChangeText={setUsername} style={{marginBottom: 10}} autoComplete={true} />\n                <TextInput label=\"Password\" secureTextEntry={true} onChangeText={setPassword} style={{marginBottom: 10}} autoComplete={false} />\n                <Button mode=\"contained\" icon=\"login\" onPress={() => {\n                  setLoadingMessage('Logging in to Brickset ...')\n                  login(username, password)\n                    .then(() => {\n                      setLoadingMessage('Importing collection from Brickset ...')\n                      fetchBricksetCollection()\n                        .then(() => setLoadingMessage(''))\n                        .catch(() => setLoadingMessage(''))\n                    })\n                    .catch(() => setLoadingMessage(''))\n                }}>\n                  Login\n                </Button>\n              </View>\n            }\n          </Card.Content>\n        </Card>\n      </RequireAPISupport>\n    </ScrollView>\n  )\n}\n","/**\n * Learn more about deep linking with React Navigation\n * https://reactnavigation.org/docs/deep-linking\n * https://reactnavigation.org/docs/configuring-links\n */\n\nimport {LinkingOptions} from '@react-navigation/native'\nimport * as Linking from 'expo-linking'\n\nimport {RootStackParamList} from './types'\n\nconst linking: LinkingOptions<RootStackParamList> = {\n  prefixes: [Linking.makeUrl('https://jeromedane.github.io/')],\n  config: {\n    initialRouteName: 'Root',\n    screens: {\n      Root: {\n        initialRouteName: 'Sets',\n        path: 'brick-tools-for-lego',\n        screens: {\n          Parts: 'parts',\n          Themes: 'themes',\n          Sets: 'sets',\n          About: 'about',\n          Settings: 'settings'\n        }\n      },\n      Element: 'brick-tools-for-lego/element/:id',\n      Set: {\n        path: 'brick-tools-for-lego/set/:id',\n        screens: {\n          SetDetails: 'details',\n          SetInstructions: 'instructions',\n          SetParts: 'parts'\n        }\n      },\n      Part: 'brick-tools-for-lego/part/:id',\n      Modal: 'brick-tools-for-lego/modal',\n      NotFound: '*'\n    }\n  }\n}\n\nexport default linking\n","import {MaterialTopTabScreenProps, createMaterialTopTabNavigator} from '@react-navigation/material-top-tabs'\nimport React, {useEffect} from 'react'\nimport SetDetailsScreen from './SetDetails'\nimport SetPartsScreen from './parts/SetParts'\nimport SetInstructionsScreen from './SetInstructions'\nimport {useSet} from '../../data/sets'\nimport {RootStackParamList} from '../../navigation/types'\nimport {useIsFocused} from '@react-navigation/native'\n\nexport type SetTabsParamList = {\n  SetDetails: {id: string};\n  SetInstructions: {id: string};\n  SetParts: {id: string};\n}\n\nconst Tab = createMaterialTopTabNavigator()\n\nconst SetTabs = ({navigation: {setOptions}, route: {params: {id}}}: MaterialTopTabScreenProps<RootStackParamList, 'Set'>) => {\n  const set = useSet(id),\n        isFocused = useIsFocused()\n  useEffect(() => {\n    setOptions({title: set?.setNum.replace(/-.*$/, '') + ' ' + set?.name})\n  }, [set])\n  return isFocused\n    ? <Tab.Navigator initialRouteName=\"SetDetails\">\n      <Tab.Screen\n        name=\"SetDetails\"\n        initialParams={{id}}\n        options={{title: 'Details'}}\n        component={SetDetailsScreen} />\n      <Tab.Screen\n        name=\"SetParts\"\n        initialParams={{id}}\n        options={{title: 'Parts'}}\n        component={SetPartsScreen} />\n      <Tab.Screen\n        name=\"SetInstructions\"\n        initialParams={{id}}\n        options={{title: 'Instructions'}}\n        component={SetInstructionsScreen} />\n    </Tab.Navigator>\n    : null\n}\n\nexport default SetTabs\n","import {MaterialTopTabScreenProps} from '@react-navigation/material-top-tabs'\nimport React, {useEffect, useState} from 'react'\nimport Spinner from '../../components/Spinner'\nimport {ScrollView, Linking, View} from 'react-native'\nimport {Button, Card, Paragraph} from 'react-native-paper'\nimport {Text, TextInput} from '../../components/Themed'\nimport ScaledImage from '../../components/ScaledImage'\nimport {SetTabsParamList} from './SetScreen'\nimport {useSetWanted, useSetOwned} from '../../api/brickset'\nimport TextLink from '../../components/TextLink'\nimport CheckBox from '../../components/Checkbox'\nimport {useIsLoggedInToBrickset} from '../../api/brickset'\nimport {useSet} from '../../data/sets'\n\nexport default function SetDetailsScreen({navigation, route: {params: {id}}}: MaterialTopTabScreenProps<SetTabsParamList, 'SetDetails'>) {\n  const set = useSet(id),\n        [loadingMessage, setLoadingMessage] = useState(''),\n        isLoggedInToBrickset = useIsLoggedInToBrickset(),\n        [quantityOwned, setQuantityOwned] = useState(\n          ((isLoggedInToBrickset && set && set.collection && set.collection.qtyOwned) || 0).toString()\n        ),\n        setWanted = useSetWanted(),\n        setOwned = useSetOwned()\n  useEffect(() => {\n    if(set && set.collection)\n      setQuantityOwned(set.collection.qtyOwned.toString())\n  }, [set])\n  return set\n    ? <ScrollView style={{padding: 20}}>\n      <Spinner visible={Boolean(loadingMessage)} textContent={loadingMessage} />\n      <ScaledImage\n        width={500}\n        source={{uri: set.image.imageURL}}\n        style={{marginBottom: 20}} />\n      <Card style={{marginBottom: 20}}>\n        <Card.Title title=\"Set Details\" />\n        <Card.Content>\n          <Paragraph>Set number: {set.setNum}</Paragraph>\n          <Paragraph>Theme: {set.theme.name}</Paragraph>\n          <Paragraph>{set.name}</Paragraph>\n          <Paragraph>\n            {set.numParts.toLocaleString()} parts\n            {set.LEGOCom.US.retailPrice ?\n              ` - $${(set.LEGOCom.US.retailPrice / set.numParts).toFixed(2)} USD per part`\n              : ''\n            }\n          </Paragraph>\n          <Paragraph>\n            Released in {set.year}\n            {set.LEGOCom.US.retailPrice ?\n              ` at $${set.LEGOCom.US.retailPrice.toLocaleString()} USD`\n              : ''\n            }\n          </Paragraph>\n          <Paragraph>Owned by {set.ownedBy.toLocaleString()} people on Brickset</Paragraph>\n          <Paragraph>Wanted by {set.wantedBy.toLocaleString()} people on Brickset</Paragraph>\n        </Card.Content>\n      </Card>\n      <Card style={{marginBottom: 20}}>\n        <Card.Title title=\"Collection\" />\n        <Card.Content>\n          {isLoggedInToBrickset\n            ? <View>\n              <View style={{marginBottom: 10}}>\n                <CheckBox\n                  label=\"I want this set\"\n                  value={set.collection.wanted}\n                  onValueChange={(newValue) => {\n                    setLoadingMessage(`Saving as ${newValue ? '' : 'not '}wanted on Brickset ...`)\n                    setWanted(set, newValue)\n                      .then(() => setLoadingMessage(''))\n                      .then(() => setLoadingMessage(''))\n                  }}\n                />\n              </View>\n              <View style={{marginBottom: 10}}>\n                <CheckBox\n                  label=\"I own this set\"\n                  value={set.collection.owned}\n                  onValueChange={(newValue) => {\n                    setLoadingMessage(`Saving as ${newValue ? '' : 'not '}owned on Brickset ...`)\n                    setOwned(set, newValue ? 1 : 0)\n                      .then(() => {\n                        setQuantityOwned('1')\n                        setLoadingMessage('')\n                      })\n                      .then(() => setLoadingMessage(''))\n                  }}\n                />\n              </View>\n              {set.collection.owned\n                ? <TextInput\n                  label=\"How many copies do I own?\"\n                  keyboardType=\"numeric\"\n                  onChangeText={value => {\n                    const int = parseInt(value)\n                    if(!value) setQuantityOwned('')\n                    else if(isNaN(int)) setQuantityOwned('')\n                    else setQuantityOwned(int.toString())\n                  }}\n                  onBlur={() => {\n                    setLoadingMessage(`Saving as ${quantityOwned != '0' ? quantityOwned : 'not'} owned on Brickset ...`)\n                    setOwned(set, parseInt(quantityOwned))\n                      .then(() => setLoadingMessage(''))\n                      .then(() => setLoadingMessage(''))\n                  }}\n                  value={quantityOwned} />\n                : null\n              }\n            </View>\n            : <TextLink\n              style={{marginTop: 10}}\n              onPress={() => navigation.navigate('Settings')}>\n              Log into Brickset to track how of this set many you own.\n            </TextLink>\n          }\n        </Card.Content>\n      </Card>\n      <Card style={{marginBottom: 20}}>\n        <Card.Title title=\"Links\" />\n        <Card.Content>\n          <Button onPress={() =>\n            Linking.openURL('https://brickset.com/sets/' + set.setNum)\n          }>\n            Brickset\n          </Button>\n          <Button onPress={() =>\n            Linking.openURL('https://rebrickable.com/sets/' + set.setNum)\n          }>\n            Rebrickable\n          </Button>\n        </Card.Content>\n      </Card>\n    </ScrollView>\n    : <Text>Unable to find set number &quot;{id}&quot;</Text>\n}\n","import * as React from 'react'\nimport {View} from 'react-native'\nimport {Text} from './Themed'\nimport DefaultCheckBox, {CheckBoxProps as DefaultCheckBoxProps} from '@react-native-community/checkbox'\n\ninterface CheckBoxProps extends DefaultCheckBoxProps {\n  label: string\n}\n\nconst CheckBox = (props: CheckBoxProps) => {\n  return <View style={{flex: 1, flexDirection: 'row'}}>\n    <DefaultCheckBox {...props} style={[props.style, { }]}\n      tintColors={{false: '#aaa'}}\n      lineWidth={2} />\n    <Text style={{position: 'relative', top: 5}}>\n      {props.label}\n    </Text>\n  </View>\n}\n\nexport default CheckBox\n","import React, {useCallback, useEffect, useState} from 'react'\nimport {MaterialTopTabScreenProps} from '@react-navigation/material-top-tabs'\nimport {SetTabsParamList} from '../SetScreen'\nimport {useSet} from '../../../data/sets'\nimport LoadingWrapper from '../../../components/LoadingWrapper'\nimport SetPartsList from './SetPartsList'\nimport {useFocusEffect} from '@react-navigation/native'\n\nexport default function SetPartsScreen({navigation, route: {params: {id}}} : MaterialTopTabScreenProps<SetTabsParamList, 'SetParts'>) {\n  const set = useSet(id),\n        [hasFocused, setHasFocused] = useState(false)\n  useEffect(() => {\n    navigation.setOptions({title: `Parts (${set?.numParts.toLocaleString()})`})\n  }, [set?.numParts])\n  useFocusEffect(useCallback(() => {\n    if(!hasFocused) setHasFocused(true)\n  }, []))\n  return (\n    <LoadingWrapper loading={!hasFocused} style={{padding: 20}}>\n      <SetPartsList set={set} navigation={navigation} />\n    </LoadingWrapper>\n  )\n}\n","import React, {useMemo, useRef, useState} from 'react'\nimport {sortBy} from 'sort-by-typescript'\nimport {ActivityIndicator, ScrollView, View} from 'react-native'\nimport Paginator from '../../../components/Paginator'\nimport Switch from '../../../components/Switch'\nimport Select from '../../../components/Select'\nimport {useInventoryParts} from '../../../data/inventory-parts'\nimport SetPartPreview from './SetPartPreview'\nimport type {Set} from '../../../data/types'\nimport {NativeStackNavigationProp} from '@react-navigation/native-stack'\nimport {RootStackParamList} from '../../../navigation/types'\n\ntype SetPartsListParams = {\n  set?: Set,\n  navigation: NativeStackNavigationProp<RootStackParamList, 'Set'>\n}\n\nexport default function SetPartsList({navigation, set}: SetPartsListParams) {\n  const inventoryId = (set && set.inventories && set.inventories[0] && set.inventories[0].id) || '',\n        inventoryParts = useInventoryParts(inventoryId),\n        defaultSortOrder = 'part.category.name,part.subCategory,part.width,part.length,part.height,color.sortOrder,name',\n        [sortOrder, setSortOrder] = useState(defaultSortOrder),\n        [showSpareParts, setShowSpareParts] = useState(false),\n        [pageSize, setPageSize] = useState(25),\n        [currentPage, setCurrentPage] = useState(0),\n        scrollRef = useRef(),\n        sortedInventortParts = useMemo(\n          () => inventoryParts ? [...inventoryParts].sort(sortBy.apply(sortBy, sortOrder.split(','))) : null,\n          [inventoryParts, sortOrder]\n        ),\n        partsToShow = showSpareParts ? sortedInventortParts : sortedInventortParts?.filter(({isSpare}) => !isSpare)\n  return (\n    <ScrollView style={{padding: 20}} ref={scrollRef}>\n      {partsToShow\n        ? <View>\n          <View style={{marginVertical: 10}}>\n            <Select\n              label=\"Sort by\"\n              value={sortOrder}\n              onValueChange={value => setSortOrder(value.toString())}\n              items={[\n                {label: 'Category, size, and color', value: defaultSortOrder},\n                {label: 'Color, category, and size', value: 'color.sortOrder,part.category.name,part.subCategory,part.width,part.length,part.height,name'},\n                {label: 'Size, category, and color', value: 'part.width,part.length,part.height,part.category.name,part.subCategory,color.sortOrder,name'},\n                {label: 'Size descending, category, and color', value: '-part.width,-part.length,-part.height,part.category.name,part.subCategory,color.sortOrder,name'},\n                {label: 'Size, color, and category', value: 'part.width,part.length,part.height,color.sortOrder,part.category.name,part.subCategory,name'},\n                {label: 'Size descending, color, and category', value: '-part.width,-part.length,-part.height,color.sortOrder,part.category.name,part.subCategory,name'}\n              ]}/>\n          </View>\n          <View style={{marginBottom: 20, alignItems: 'flex-end'}}>\n            <Switch\n              label=\"Show spare parts\"\n              onValueChange={setShowSpareParts}\n              value={showSpareParts} />\n          </View>\n          {partsToShow\n            ?.slice(currentPage * pageSize, currentPage * pageSize + pageSize)\n            .map((inventoryPart, i: number) =>\n              <SetPartPreview\n                key={i}\n                navigation={navigation}\n                inventortPart={inventoryPart}\n                onPress={() => { navigation.navigate('Element', {partNum: inventoryPart.part.partNum, colorId: inventoryPart.color.id})}} />\n            )\n          }\n          {partsToShow?.length\n            ? <Paginator\n              pageSize={pageSize}\n              numItems={partsToShow.length}\n              onPageSizeChange={value => setPageSize(parseInt(value.toString()))}\n              onPageChange={val => {\n                scrollRef.current.scrollTo({y: 0, animated: true})\n                setCurrentPage(val)\n              }}\n              selectedValue={currentPage} />\n            : null\n          }\n          <View style={{height: 50}} />\n        </View>\n        : <ActivityIndicator color=\"#aaa\" />\n      }\n    </ScrollView>\n  )\n}\n","import {useMemo} from 'react'\nimport inventoryPartsData from './raw/inventory_parts.json'\nimport {useParts} from './parts'\nimport type {InventoryPart, InventoryParts} from './types'\nimport colors from './colors'\nimport {useGetElementByPartAndColor} from './elements'\n\ntype InventoryPartData = {\n  p: string, // partNum\n  c: string, // string\n  q: number, // quantity\n  s: number // isSpare\n}\n\nconst data = inventoryPartsData as {[key: string]: InventoryPartData[]}\n\nexport const useInventoryParts = (inventoryId: string) => {\n  const parts = useParts(),\n        getElementByPartAndColor = useGetElementByPartAndColor()\n  return useMemo(() => {\n    return parts\n      ? data[inventoryId]?.map(inventoryPartData => ({\n        part: parts[inventoryPartData.p],\n        color: colors[inventoryPartData.c],\n        quantity: inventoryPartData.q,\n        isSpare: inventoryPartData.s == 1,\n        element: getElementByPartAndColor(inventoryPartData.p, inventoryPartData.c)\n      }) as InventoryPart) || [] as InventoryParts\n      : null\n  }, [inventoryId, parts])\n}\n","import {NativeStackNavigationProp} from '@react-navigation/native-stack'\nimport React from 'react'\nimport {Image, View} from 'react-native'\nimport {Card, Paragraph} from 'react-native-paper'\nimport TextLink from '../../../components/TextLink'\nimport { useGetElementByPartAndColor } from '../../../data/elements'\nimport {InventoryPart} from '../../../data/types'\nimport {RootStackParamList} from '../../../navigation/types'\n\ntype SetPartPreviewProps = {\n  inventortPart: InventoryPart,\n  onPress: () => void,\n  navigation: NativeStackNavigationProp<RootStackParamList, 'Set'>\n}\n\nexport default function SetPartPreview({navigation, onPress, inventortPart: {part, color, isSpare, quantity}}: SetPartPreviewProps) {\n  const getElementByPartAndColor = useGetElementByPartAndColor(),\n        element = getElementByPartAndColor(part.partNum, color.id)\n  return <Card style={{marginBottom: 20}}\n    onPress={onPress}>\n    <Card.Title title={part.name} />\n    <Card.Content style={{flexDirection: 'row'}}>\n      <Image\n        style={{marginRight: 10, width: 100, height: 100, backgroundColor: 'gray'}}\n        source={{uri: `https://www.lego.com/cdn/product-assets/element.img.lod5photo.192x192/${element?.id}.jpg`}} />\n      <View>\n        <Paragraph>{part.category.name}{part.subCategory ? ', ' + part.subCategory : ''}</Paragraph>\n        <Paragraph>Element: {element?.id || '?'}</Paragraph>\n        <Paragraph>\n          Part:{' '}\n          <TextLink onPress={() => navigation.navigate('Part', {id: part.partNum})}>\n            {part.partNum}\n          </TextLink>\n        </Paragraph>\n        <Paragraph>{color.name} ({color.id})</Paragraph>\n        <Paragraph>Qty: {quantity}{isSpare ? ' (spare part)' : ''}</Paragraph>\n        <Paragraph>\n          Sets: {element?.setNumbers?.length}\n        </Paragraph>\n      </View>\n    </Card.Content>\n  </Card>\n}\n","import {MaterialTopTabScreenProps} from '@react-navigation/material-top-tabs'\nimport React, {useEffect, useState} from 'react'\nimport {ScrollView} from 'react-native'\nimport {Button} from 'react-native-paper'\nimport WebView from 'react-native-webview'\nimport {Text, View} from '../../components/Themed'\nimport {SetTabsParamList} from './SetScreen'\nimport {useApi} from '../../api/brickset'\nimport RequireAPISupport from '../../components/APISupport'\nimport {useSet} from '../../data/sets'\n\nexport default function SetInstructionsScreen({route: {params: {id}}}: MaterialTopTabScreenProps<SetTabsParamList, 'SetDetails'>) {\n  const set = useSet(id),\n        [instructions, setInstructions] = useState(null),\n        [downloadUrl, setDownloadUrl] = useState(''),\n        [error, setError] = useState(false),\n        api = useApi()\n  useEffect(() => {\n    api('getInstructions2', {setNumber: id})\n      .then(response => {\n        setInstructions(response?.instructions) // TODO: Fix typing\n      })\n      .catch(() => setError(true))\n  }, [set])\n  return <ScrollView style={{padding: 20}}>\n    {set\n      ? <RequireAPISupport>\n        {error\n          ? <Text>An error occured while loading instructions.</Text>\n          : null\n        }\n        {(instructions && instructions.length == 0)\n          ? <Text>No instructions found.</Text>\n          : null\n        }\n        {instructions?.map((instruction, i: number) =>\n          <Button\n            key={i}\n            disabled={instruction.URL === downloadUrl}\n            onPress={() => {\n              setDownloadUrl(instruction.URL)\n              setTimeout(() => setDownloadUrl(''), 500)\n            }}>\n            {instruction.description}\n          </Button>\n        )}\n        {downloadUrl\n          ? <WebView style={{display: 'none'}} source={{uri: downloadUrl}} />\n          : null\n        }\n      </RequireAPISupport>\n      : <Text>Unable to find set number &quot;{id}&quot;</Text>\n    }\n  </ScrollView>\n}\n"],"sourceRoot":""}